{"type":"group","name":"mining assistant","enabled":true,"id":1,"items":[{"type":"function","name":"- READ ME -","enabled":true,"id":1850,"code":"/*\n\nMINING ASSISTANT version 1.2\nCreated by Kaios\n\n\nREQUIREMENTS - PLEASE READ\n--------------------------\nNECESSARY: In order for this package to work, it is REQUIRED that you also have Zahan's MapDB (Map Database) reflex package as well. You can obtain this package from https://github.com/AchaeaZahan/Nexus (instructions for download are provided by his ReadMe on this page).\n\nOPTIONAL: If you wish to use the Mine Collection feature, you will also need to have Voka's CharacterDB (Character Database) reflex package. This is necessary in order to get a mine owner's city with their name while prospecting. You can obtain this package from https://forums.achaea.com/discussion/6527/character-db-nexus (right click the link in the post and 'Save Link as').\n\n\nList of Commands\n----------------\nMA : Displays this list.\n\nMASET : Displays your current settings. These settings include; Size of the lode that prospecting stops at, status of Mine Collection, status of Wings Mode, and the Current Route.\n\nMAPR : Begins prospecting.\n\nMASTOP : Stops prospecting. Will continue prospecting from the stopping point when re-initialized with MAPR.\n\nMACOLLECT : Turns ON or OFF the Mine Collection. Starts OFF by default. Does not work properly without the CharacterDB package. **(Refer to OPTIONAL requirements above)**\n\nMAWINGS : Turns ON or OFF Wings Mode. Starts OFF by default. **(WINGS MODE MAY NOT FUNCTION CORRECTLY AT THIS TIME)**\n\nMALODE : Reports the lode that was last prospected. *Initially disabled. Ensure that you designate a CLANTELL for this within the appropriate alias before enabling*.\n\nMALODESIZE <size> : Sets the size of lode that prospecting will stop at. Tiny, Small, Medium, Large, Huge, or Massive.\n\nMAROUTE <route> : Set the route by area that will be prospected. Refer to Route Keys list below for short-name definitions.\nExamples: maroute gra san vashcen dun vashs mhocen mhosw sir shamte pashe pashw shamtw OR maroute dak vashs sir gra ... and so on.\n\nRoute Keys:\ndak = Dakhota Hills\ndun = Dun Valley\ngra = Granite Hills\nmhocen = Mhojave Desert Central\nmhosw = Mhojave Desert Southwest\npashe = Pash Valley East\npashw = Pash Valley West\nsan = Sangre Plains\nshamte = Shamtota Hills East\nshamtw = Shamtota Hills West\nsir = Sirrocian Mountains\nvashcen = Vashnar Mountains Central\nvashs = Vashnar Mountains South\n\nMAMINES : Display a list of Mines and Lodes collected during prospecting (No Mines will be collected if Mine Collection is OFF).\n\nMASEARCH <input> : Search the Mine Collection for a name or value. Returns each mine that contains a match. **Credit to Khaseem for this alias.**\n\nMARESET : Resets the variables used in Prospecting and Data Collection (In most cases used for testing purposes). Route will be set back to the beginning and mine and lode collection will be erased.\n\nMAVALS : Display some relevant values (In most cases used for testing purposes).\n\n\nTo-do List\n----------\n- (PARTIALLY RESOLVED) Complete blocked by wall trigger. (Need method to discern the user's capabilities, eg. can they leap? are they mounted?)\n- (PARTIALLY RESOLVED) Complete allowance for Wings Mode; Ensure there are no issues with movement and destination tracking, set room orders specific for Wings Mode.\n- Different types of wings to account for?\n- Devise method to handle room order customization (beyond manual user modification).\n- Account for wendigos in Tundra. At present, their knock-down occasionally interferes with prospecting which must then be re-initialized using MAPR.\nâœ“ (RESOLVED): Vision loss (such as caused by blizzards) interferes with proper GMCP identification of items (eg. reading signs, identify walls).\n- Travel method from main land to Tundra? Fissure of Echoes?\n- Option to send Mine/Lode collection to a text file. Save to the same file each time? Create multiple files? If pushing to same, also need date/time (in-game and real) to separate. If pushing to multiple, need date/time as file name.\n- Automate lode reporting.\n- Alter search alias to not return partial matches.\n- Need method to avoid pushing duplicate strings to mine collection and lode collection arrays.\n\n\nCredits\n-------\nA very special thank you to FangFang not only in relation to this package, but also for his constant assistance and support that he has generously given to myself and many others with Nexus scripting.\n\nKhaseem, for his very helpful assistance in devising a better queueing method and for the use of his Walkto package's search alias.\n\nZahan, for without his MapDB package it would be far more difficult to create such packages like this in the first place.\n\nVoka, for the creation of the CharacterDB package which is an incredibly useful tool.\n\nThank you to the testers, Svenson and Aranos!\n*/"},{"type":"function","name":"onLoad","enabled":true,"id":1809,"code":"'use strict';\n\n// Global variable object\nma = {};\n\n// Balance\nma.myBal = 1;\nma.balanceCommands = [];\n\n// Set Room and Data tracking variables\nma.prospecting = 0;\nma.nextRoom = 0;\nma.nextRoomTundra = 0;\nma.counterMines = 1;\nma.counterLodes = 1;\nma.counterData = 1;\nma.finalData = [];\nma.finalMines = [];\nma.finalLodes = [];\nma.signID = undefined;\nma.wallID = undefined;\n\nma.roomName = \"\";\nma.roomID = 0;\nma.checkArea = \"\";\nma.checkEnviro = \"\";\nma.blizzard = 0;\n\n// Declare variable for Main\nma.walkToAreas = {};\n\n// Set Rooms for Tundra\nma.walkToTundra = [10832, 10866, 10833, 10836, 10835, 10906, 10922, 10923, 10924, 11049, 10891, 10892, 10894, 10896, 10893, 10897, 10898, 10901, 10907, 13931, 10909, 10911, 13934, 10912, 14104, 10914, 10915];\n\n// Set Mine Collection\nif (client.get_variable(\"ma.mineCollect\")) {\n    ma.mineCollect = client.get_variable(\"ma.mineCollect\");\n} else {\n    ma.mineCollect = \"OFF\";\n    client.set_variable(\"ma.mineCollect\", \"OFF\");\n\tdisplay_notice(`MINING ASSISTANT: Mine Collection set OFF by default!`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Set Wings Mode\nif (client.get_variable(\"ma.wingsMode\")) {\n    ma.wingsMode = client.get_variable(\"ma.wingsMode\");\n} else {\n    ma.wingsMode = \"OFF\";\n    client.set_variable(\"ma.wingsMode\", \"OFF\");\n\tdisplay_notice(`MINING ASSISTANT: Wings Mode set OFF by default!`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Set default route\nif (client.get_variable(\"ma.walkToRoute\") && client.get_variable(\"ma.walkTo\")) {\n    ma.walkTo = client.get_variable(\"ma.walkTo\");\n    ma.walkToRoute = client.get_variable(\"ma.walkToRoute\");\n} else {\n    send_command(\"maroute gra san vashcen dun vashs mhocen mhosw sir shamte pashe pashw shamtw\");\n    display_notice(`MINING ASSISTANT: Default Route Set!`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Set default lode size to stop at\nif (client.get_variable(\"ma.stopAtSize\")) {\n    ma.stopAtSize = client.get_variable(\"ma.stopAtSize\");\n} else {\n    ma.stopAtSize = \"medium\";\n    client.set_variable(\"ma.stopAtSize\", \"medium\");\n    display_notice(`MINING ASSISTANT: No custom lode size to stop at detected, default set to Medium.`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Successful Load Notification\nif (client.get_variable(\"ma.mineCollect\") && client.get_variable(\"ma.wingsMode\") && client.get_variable(\"ma.walkToRoute\") && client.get_variable(\"ma.walkTo\") && client.get_variable(\"ma.stopAtSize\")) {\n    display_notice(`MINING ASSISTANT: LOAD SUCCESS! Use MASET to view your current settings.`, \"#d0ff14\", \"#8b0000\");\n};"},{"type":"function","name":"onGMCP","enabled":true,"id":1820,"code":"'use strict';\n\n// Balance Queue\nif (args.gmcp_method === \"Char.Vitals\") {\n    ma.myBal = args.gmcp_args.bal;\n    if (ma.balanceCommands.length > 0) {\n        ma.balanceCommands.shift();\n    };\n};\n\n// Room Settings\nif (args.gmcp_method === \"Room.Info\") {\n\t//Room Set\n\tma.roomName = args.gmcp_args.name;\n    \n    //Room ID Set\n    ma.roomID = args.gmcp_args.num;\n\n\t//Area Set\n\tma.checkArea = args.gmcp_args.area;\n\t\n\t//Environment Set\n\tma.checkEnviro = args.gmcp_args.environment;\n    ma.blizzard = 0;\n};\n\n// Item ID Set\nif (args.gmcp_method === \"Char.Items.List\") {\n    for (let i = 0; i < args.gmcp_args.items.length; i++) {\n        \n        // Set Sign ID\n        if (args.gmcp_args.items[i].name === \"a small wooden sign\") {\n            ma.signID = args.gmcp_args.items[i].id;\n        };\n        \n        // Set Ice Wall ID\n        if (args.gmcp_args.items[i].name === \"a large wall of ice\") {\n            ma.wallID = args.gmcp_args.items[i].id;\n        };\n    };\n};\n\n// Wall added while in room\nif (args.gmcp_method === \"Char.Items.Add\") {\n\n        // Set Ice Wall ID\n        if (args.gmcp_args.item.name === \"a large wall of ice\") {\n            ma.wallID = args.gmcp_args.item.id;\n        };\n};\n\n// Wall removed while in room\nif (args.gmcp_method === \"Char.Items.Remove\") {\n    \n        // Set Ice Wall ID\n        if (args.gmcp_args.item.name === \"a large wall of ice\") {\n            ma.wallID = undefined;\n        };\n};"},{"type":"alias","name":"StartProspecting","enabled":true,"id":1810,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Enable group 'ProspectTriggers'\nreflex_enable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Enable group 'ProspectReflex'\nreflex_enable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Enable trigger 'ArrivedDestiation'\nreflex_enable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n\nma.prospecting = 1;\n\nif (ma.wingsMode === \"ON\") {\n\tsend_command(\"ARTEFACT RECALL WINGS\", true);\n\tsend_command(\"WEAR WINGS\", true);\n};\n\n// Movement on Main\nfunction ma_movementMain() {\n    display_notice(`MINING ASSISTANT: PROSPECTING INITIALIZED!`, \"#d0ff14\", \"#8b0000\");\n    if (ma.nextRoom < ma.walkTo.length && ma.roomID !== ma.walkTo[ma.nextRoom]) {\n    \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n\t} else if (ma.nextRoom < ma.walkTo.length && ma.roomID === ma.walkTo[ma.nextRoom]) {\n    \t// Prospect current room (will happen if continuing in the same room after stopped)\n    \tsend_command(\"PROSPECT\", true);\n\t} else if (ma.nextRoom >= ma.walkTo.length) {\n\t\t// Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\t\tma.prospecting = 0;\n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t};\n};\n\n// Movement on Tundra\nfunction ma_movementTundra() {\n    display_notice(`MINING ASSISTANT: PROSPECTING INITIALIZED!`, \"#d0ff14\", \"#8b0000\");\n    \n\tif (ma.nextRoomTundra < ma.walkTo.length && ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n    \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n\t} else if (ma.nextRoomTundra < ma.walkToTundra.length && ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n    \t// Prospect current room (will happen if continuing in the same room after stopped)\n    \tsend_command(\"PROSPECT\", true);\n\t} else if (ma.nextRoomTundra >= ma.walkToTundra.length) {\n\t\t// Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\t\tma.prospecting = 0;\n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t};\n};\n\n// Start prospecting main areas\nif (ma.checkArea !== \"the frozen tundra\") {\n    ma_movementMain();\n\n// Start prospecting Tundra\n} else if (ma.checkArea === \"the frozen tundra\") {\n    ma_movementTundra();\n};"}],"text":"mapr"},{"type":"alias","name":"StopProspecting","enabled":true,"id":1822,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Disable group 'ProspectReflex'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Disable trigger 'ArrivedDestiation'\nreflex_disable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n\nma.prospecting = 0;\n\nsend_command(\"CLEARQUEUE ALL\", true);\nsend_command(\"STOP\", true);\n\nif (ma.wingsMode === \"ON\") {\n\tsend_command(\"REMOVE WINGS\", true);\n};\n\ndisplay_notice(`PROSPECTING CEASED! MAPR TO CONTINUE!`, \"#d0ff14\", \"#8b0000\");"}],"text":"mastop"},{"type":"alias","name":"SetRoute","enabled":true,"id":1827,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nif (ma.wingsMode === \"OFF\") {\n    // Ground Route\n    ma.walkToAreas = {\n    \t// Dakhota Hills\n    \tdak: [1077, 1081, 1080, 1079, 1082, 1099, 1083, 1098, 1097, 1096, 1100, 1101, 1125, 1126, 1127, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1130, 1108, 1129, 1107, 1104, 1105, 1111, 1114, 1113, 1112, 1123, 1121, 1118, 1119, 1115, 1102, 1103, 1095, 1092, 1093, 1094, 1084, 1089, 1090, 1091, 1088],\n    \t// Dun Valley\n    \tdun: [5032, 5033, 5034, 5035, 5036, 3795, 3797, 3812, 3798, 3821, 3800, 3804, 3802, 3805, 3801, 3799],\n    \t// Granite Hills\n    \tgra: [9086, 9088, 9089, 9090, 9091, 9092, 9093, 9096, 9094, 9095, 9138, 9147, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9131, 9130, 9067, 9068, 9069, 9074, 9073, 9075, 9070, 9071, 9072, 9145, 9144, 9143, 9142, 9141, 9140, 9139, 18634, 19004, 11657, 11693],\n    \t// Mhojave Desert Central\n    \tmhocen: [1243, 1244, 1251, 1250, 1245, 1249, 1246, 1247, 1235, 1236, 1237, 356, 357, 358, 316, 318, 312, 311, 317, 310, 314, 346, 350, 354, 353, 352, 6587, 6629, 348, 349, 45863, 345, 344, 308, 307, 303, 306, 305, 304, 14790, 13778, 6164, 300, 301, 302, 309],\n    \t// Mhojave Desert Southwest\n    \tmhosw: [330, 355, 351, 347, 343, 333, 334, 335, 331],\n    \t// Pash Valley East\n    \tpashe: [1626, 1627, 1628, 1631, 1629, 1630, 1633, 1634, 1635, 1632],\n    \t// Pash Valley West\n    \tpashw: [1685, 1683, 1686, 1697, 1706, 1707, 1708, 1709, 1710, 1705, 1711, 1712, 1719, 1718, 1713, 1714, 1715, 5585, 4315, 1716, 1717, 1720, 1722, 1723, 1724, 1725, 1726],\n    \t// Sangre Plains\n    \tsan: [7626, 7625, 7226, 7156, 7155, 7154, 7153],\n    \t// Shamtota Hills East\n    \tshamte: [1429, 1426, 1424, 1425, 1423, 1427, 1428, 1435, 1432, 1430, 1434, 1433],\n    \t// Shamtota Hills West\n    \tshamtw: [1619, 1728, 1727, 1729, 1490, 1436],\n    \t// Sirrocian Mountains\n    \tsir: [2988, 2987, 2986, 2985, 2984, 2983, 2981, 3420, 3421, 3422, 3423, 3424, 2980, 2979, 2977, 2990, 2991, 2997, 3015, 3016, 28632, 3017, 3019, 3389, 3390, 3020, 3391, 3018],\n    \t// Vashnar Mountains Central\n    \tvashcen: [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019],\n    \t// Vashnar Mountains South\n    \tvashs: [10222, 10206, 10181, 10189, 10185, 10182, 10186, 10184, 10190, 10192, 10193, 10187, 10240, 10194, 10195, 10196, 10712, 10202, 10203, 10567, 10412, 10429, 10218, 10219, 10448, 10250, 10280, 38162, 35601, 35193, 10241, 10458, 10381, 10502, 10224, 10247, 10226, 10299, 10342, 10235, 13553, 10311],\n\t};\n    \n} else if (ma.wingsMode === \"ON\") {\n    // Wings Route\n    ma.walkToAreas = {\n    \t// Dakhota Hills\n    \tdak: [1077, 1081, 1080, 1079, 1082, 1099, 1083, 1098, 1097, 1096, 1100, 1101, 1125, 1126, 1127, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1130, 1108, 1129, 1107, 1104, 1105, 1111, 1114, 1113, 1112, 1123, 1121, 1118, 1119, 1115, 1102, 1103, 1095, 1092, 1093, 1094, 1084, 1089, 1090, 1091, 1088],\n    \t// Dun Valley\n    \tdun: [5032, 5033, 5034, 5035, 5036, 3795, 3797, 3812, 3798, 3821, 3800, 3804, 3802, 3805, 3801, 3799],\n    \t// Granite Hills\n    \tgra: [9086, 9088, 9089, 9090, 9091, 9092, 9093, 9096, 9094, 9095, 9138, 9147, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9131, 9130, 9067, 9068, 9069, 9074, 9073, 9075, 9070, 9071, 9072, 9145, 9144, 9143, 9142, 9141, 9140, 9139, 18634, 19004, 11657, 11693],\n    \t// Mhojave Desert Central\n    \tmhocen: [1243, 1244, 1251, 1250, 1245, 1249, 1246, 1247, 1235, 1236, 1237, 356, 357, 358, 316, 318, 312, 311, 317, 310, 314, 346, 350, 354, 353, 352, 6587, 6629, 348, 349, 45863, 345, 344, 308, 307, 303, 306, 305, 304, 14790, 13778, 6164, 300, 301, 302, 309],\n    \t// Mhojave Desert Southwest\n    \tmhosw: [330, 355, 351, 347, 343, 333, 334, 335, 331],\n    \t// Pash Valley East\n    \tpashe: [1626, 1627, 1628, 1631, 1629, 1630, 1633, 1634, 1635, 1632],\n    \t// Pash Valley West\n    \tpashw: [1685, 1683, 1686, 1697, 1706, 1707, 1708, 1709, 1710, 1705, 1711, 1712, 1719, 1718, 1713, 1714, 1715, 5585, 4315, 1716, 1717, 1720, 1722, 1723, 1724, 1725, 1726],\n    \t// Sangre Plains\n    \tsan: [7626, 7625, 7226, 7156, 7155, 7154, 7153],\n    \t// Shamtota Hills East\n    \tshamte: [1429, 1426, 1424, 1425, 1423, 1427, 1428, 1435, 1432, 1430, 1434, 1433],\n    \t// Shamtota Hills West\n    \tshamtw: [1619, 1728, 1727, 1729, 1490, 1436],\n    \t// Sirrocian Mountains\n    \tsir: [2988, 2987, 2986, 2985, 2984, 2983, 2981, 3420, 3421, 3422, 3423, 3424, 2980, 2979, 2977, 2990, 2991, 2997, 3015, 3016, 28632, 3017, 3019, 3389, 3390, 3020, 3391, 3018],\n    \t// Vashnar Mountains Central\n    \tvashcen: [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019],\n    \t// Vashnar Mountains South\n    \tvashs: [10222, 10206, 10181, 10189, 10185, 10182, 10186, 10184, 10190, 10192, 10193, 10187, 10240, 10194, 10195, 10196, 10712, 10202, 10203, 10567, 10412, 10429, 10218, 10219, 10448, 10250, 10280, 38162, 35601, 35193, 10241, 10458, 10381, 10502, 10224, 10247, 10226, 10299, 10342, 10235, 13553, 10311],\n\t};\n};\n\nlet areaOrderString = args[0].toLowerCase().split(' ');\nlet areaOrder = [];\nlet areaNewString = [];\nfor (let i = 1; i < areaOrderString.length; i++) {\n    \n    // Pretty-up the route display and check for input errors\n    switch(areaOrderString[i]) {  \n        case \"sir\":\n            areaNewString.push(\"Sirrocian Mountains\");\n        \tbreak;\n    \n    \tcase \"shamte\":\n            areaNewString.push(\"Shamtota Hills (East)\");\n        \tbreak;\n        \n    \tcase \"shamtw\":\n            areaNewString.push(\"Shamtota Hills (West)\");\n        \tbreak;\n        \n    \tcase \"pashe\":\n            areaNewString.push(\"Pash Valley (East)\");\n        \tbreak;\n        \n    \tcase \"pashw\":\n            areaNewString.push(\"Pash Valley (West)\");\n            break;\n\n    \tcase \"vashs\":\n            areaNewString.push(\"Vashnar Mountains (Southern)\");\n        \tbreak;\n            \n        case \"vashcen\":\n            areaNewString.push(\"Vashnar Mountains (Central)\");\n        \tbreak;\n            \n        case \"mhocen\":\n            areaNewString.push(\"Mhojave Desert (Central)\");\n        \tbreak;\n            \n        case \"mhosw\":\n            areaNewString.push(\"Mhojave Desert (Southwest)\");\n        \tbreak;\n            \n        case \"dak\":\n            areaNewString.push(\"Dakhota Hills\");\n        \tbreak;\n            \n        case \"dun\":\n            areaNewString.push(\"Dun Valley\");\n        \tbreak;\n            \n        case \"gra\":\n            areaNewString.push(\"Granite Hills\");\n        \tbreak;\n            \n        case \"san\":\n            areaNewString.push(\"Sangre Plains\");\n        \tbreak;\n        \n    \tdefault:\n        \tdisplay_notice(`MINING ASSISTANT: NOT A CORRECT INPUT!`, \"#d0ff14\", \"#8b0000\");\n            display_notice(`Please use sir, shamte, shamtw, pashe, pashw, vashs, vashcen, dak, mhocen, mhosw, dun, gra, or san.\\nTo see this list in greater detail, use MALEGEND.`, \"#d0ff14\", \"#8b0000\");\n            return;\n    };\n    \n    // Set new route\n    ma.walkToAreas[areaOrderString[i]].forEach(area => areaOrder.push(area));\n};\n\n// Set the route ordered by area\nclient.set_variable(\"ma.walkTo\", areaOrder);\nma.walkTo = client.get_variable(\"ma.walkTo\");\n// Set the pretty route display\nclient.set_variable(\"ma.walkToRoute\", areaNewString.toString().replace(/,/g , ', '));\nma.walkToRoute = client.get_variable(\"ma.walkToRoute\");\n\ndisplay_notice(`MINING ASSISTANT: Route set to ${ma.walkToRoute}.`, \"#d0ff14\", \"#8b0000\");"}],"text":"^maroute (.+)$"},{"type":"alias","name":"SetLodeDetection","enabled":true,"id":1825,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nvar ma_setSize = args[1].toLowerCase();\n\nswitch(ma_setSize) {  \n    case \"tiny\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n    \n    case \"small\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"medium\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"large\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"huge\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;      \n\n    case \"massive\":\n        client.set_variable(\"ma.stopAtSize\", ma_setSize);\n        ma.stopAtSize = ma_setSize;\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: NOT A CORRECT INPUT! PLEASE USE TINY, SMALL, MEDIUM, LARGE, HUGE, OR MASSIVE!`, \"#d0ff14\", \"#8b0000\");\n};"}],"text":"^malodesize (\\w+)$"},{"type":"alias","name":"LodeReporting","enabled":false,"id":1853,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Reports the lode that was last prospected\n\nsend_command(`Add clan tell here ${ma.prLodeSize} ${ma.prLodeType} in ${ma.prArea} at ${ma.prRoomName} (${ma.prRoomID})`);"}],"text":"malode","items":[]},{"type":"alias","name":"On/Off Alias","enabled":true,"id":1857,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nlet inputCheck = args[0].toLowerCase();\n\nswitch(inputCheck) {\n        \n    // Mine Collection On/Off\n    case \"macollect\":\n        if (ma.mineCollect === \"OFF\") {\n            ma.mineCollect = \"ON\";\n    \t\tclient.set_variable(\"ma.mineCollect\", \"ON\");\n    \t\t// Enable trigger 'MineCollection'\n\t\t\treflex_enable(reflex_find_by_name(\"trigger\", \"MineCollection\", true, false, \"Mining assistant\"));\n    \t\tdisplay_notice(`MINING ASSISTANT: MINE COLLECTION ON!`, \"#d0ff14\", \"#8b0000\");\n        } else if (ma.mineCollect === \"ON\") {\n    \t\tma.mineCollect = \"OFF\";\n    \t\tclient.set_variable(\"ma.mineCollect\", \"OFF\");\n    \t\t// Disable trigger 'MineCollection'\n\t\t\treflex_disable(reflex_find_by_name(\"trigger\", \"MineCollection\", true, false, \"Mining assistant\"));\n\t\t\tdisplay_notice(`MINING ASSISTANT: MINE COLLECTION OFF!`, \"#d0ff14\", \"#8b0000\");\n        };\n        break;\n    \n    // Wings Mode On/Off\n    case \"mawings\":\n        if (ma.wingsMode === \"OFF\") {\n            ma.wingsMode = \"ON\";\n    \t\tclient.set_variable(\"ma.wingsMode\", \"ON\");\n            // Enable trigger 'DestinationTrack'\n\t\t\treflex_enable(reflex_find_by_name(\"trigger\", \"DestinationTrack\", true, false, \"Mining assistant\"));\n            // Enable trigger 'CloudsMovement'\n\t\t\treflex_enable(reflex_find_by_name(\"trigger\", \"CloudsMovement\", true, false, \"Mining assistant\"));\n    \t\tdisplay_notice(`MINING ASSISTANT: WINGS MODE ON!`, \"#d0ff14\", \"#8b0000\");\n        } else if (ma.wingsMode === \"ON\") {\n    \t\tma.wingsMode = \"OFF\";\n    \t\tclient.set_variable(\"ma.wingsMode\", \"OFF\");\n            // Disable trigger 'DestinationTrack'\n\t\t\treflex_disable(reflex_find_by_name(\"trigger\", \"DestinationTrack\", true, false, \"Mining assistant\"));\n            // Disable trigger 'CloudsMovement'\n\t\t\treflex_disable(reflex_find_by_name(\"trigger\", \"CloudsMovement\", true, false, \"Mining assistant\"));\n\t\t\tdisplay_notice(`MINING ASSISTANT: WINGS MODE OFF!`, \"#d0ff14\", \"#8b0000\");\n        };\n        break;\n        \n    default:\n        return;\n};"}],"text":"^(macollect)|(mawings)$"},{"type":"alias","name":"SearchMines","enabled":true,"id":1872,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Credit to Khaseem for this alias\n// Search all entries collected by the trigger 'MineCollection' for matches based on name or value. Partial matches will also return. Not case-sensitive.\nlet search = args[1].toLowerCase().trim();\nlet numEntries = ma.finalMines.filter(x => x.toLowerCase().includes(search));\n\n// Search entries\nif (ma.finalMines.length > 0) {\n    if (numEntries.length > 0) {\n        display_notice(`\\nMINING ASSISTANT: SEARCH COMPLETE! ${numEntries.length} matches found:`);\n    \tfor (let i = 0; i < numEntries.length; i++) {\n\t\tprint(numEntries[i]);\n    \t};\n\t} else {\n    \tdisplay_notice(`\\nMINING ASSISTANT: No entries found matching \"${args[1]}\"`);\n\t};\n// If no entries\n} else {\n    display_notice(`\\nMINING ASSISTANT: Unable to search, no mines have been collected.`);\n};"}],"text":"^masearch((?:\\s\\S+)+)$"},{"type":"alias","name":"LegendDisplay","enabled":true,"id":1849,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\ndisplay_notice(`MINING ASSISTANT LEGEND\\n~~~~~~~~~~~~~~~~~~\n\nMA : Displays this list.\nMASET : Displays your current settings.\nMAPR : Begins prospecting.\nMASTOP : Stops prospecting. Will continue prospecting from the stopping point when re-initialized with MAPR.\nMACOLLECT : Turns ON or OFF the Mine Collection.\nMAWINGS : Turns ON or OFF Wings Mode.\nMALODE : Reports the lode that was last prospected.\nMALODESIZE <size> : Sets the size of lode that prospecting will stop at. Tiny, Small, Medium, Large, Huge, or Massive.\nMAROUTE <route> : Set the route by area that will be prospected. Refer to Route Keys list below for short-name definitions.\nExamples: maroute gra san vashcen dun vashs mhocen mhosw sir shamte pashe pashw shamtw OR maroute dak vashs sir gra ... and so on.\n\nRoute Keys:\ndak = Dakhota Hills\ndun = Dun Valley\ngra = Granite Hills\nmhocen = Mhojave Desert Central\nmhosw = Mhojave Desert Southwest\npashe = Pash Valley East\npashw = Pash Valley West\nsan = Sangre Plains\nshamte = Shamtota Hills East\nshamtw = Shamtota Hills West\nsir = Sirrocian Mountains\nvashcen = Vashnar Mountains Central\nvashs = Vashnar Mountains South\n\nMAMINES : Display a list of Mines and Lodes collected during prospecting (No Mines will be collected if Mine Collection is OFF).\nMASEARCH <input> : Search the Mine Collection for a name or value. Returns each mine that contains a match.`);"}],"text":"ma"},{"type":"alias","name":"DataDisplay","enabled":true,"id":1816,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Mine Collection\nif (ma.finalMines.length > 0) {\n    display_notice(`MINES\\n-------`);\n\tprint(`Total: ${ma.counterMines - 1}`);\n\tfor (let i = 0; i < ma.finalMines.length; i++) {\n\t\tprint(ma.finalMines[i]);\n\t};\n} else {\n    display_notice(`MINES\\n-------`);\n    print(\"No mines have been collected.\");\n};\n\n// Lode Collection\nif (ma.finalLodes.length > 0) {\n    display_notice(`\\nLODES\\n-------`);\n\tprint(`Total: ${ma.counterLodes - 1}`);\n\tfor (let i = 0; i < ma.finalLodes.length; i++) {\n\t\tprint(ma.finalLodes[i]);\n\t};\n} else {\n    display_notice(`\\nLODES\\n-------`);\n    print(\"No lodes have been collected.\");\n};\n\n/*\n// Room Collection\n//print(ma.finalData.length);\nif (ma.finalData.length > 0) {\n    display_notice(`\\nROOMS\\n-----`);\n\tprint(\"counterData \" + (ma.counterData - 1));\n\tfor (let i = 0; i < ma.finalData.length; i++) {\n\tprint(ma.finalData[i]);\n\t};\n} else {\n    print(\"No rooms have been collected.\");\n};\n*/"}],"text":"mamines"},{"type":"alias","name":"SettingsDisplay","enabled":true,"id":1859,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Display lode size to stop at\ndisplay_notice(`Prospecting stops at: ${ma.stopAtSize.replace(/\\b\\w/g, l => l.toUpperCase())} lodes`);\n\n// Display Mine Collection status\nif (ma.mineCollect === \"ON\") {\n    display_notice(`Mine Collection: ON`);\n} else {\n    display_notice(`Mine Collection: OFF`);\n};\n\n// Display Wings Mode status\nif (ma.wingsMode === \"ON\") {\n    display_notice(`Wings Mode: ON`);\n} else {\n    display_notice(`Wings Mode: OFF`);\n};\n\n// Display current route\ndisplay_notice(`Current Route:\\n${ma.walkToRoute}.`);"}],"text":"maset"},{"type":"group","name":"ProspectTriggers","enabled":true,"id":1812,"items":[{"type":"trigger","name":"ArrivedDestination","enabled":true,"id":1814,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You have arrived at your destination!","actions":[{"action":"script","script":"'use strict';\n\n// Prospect Main\nfunction ma_prospectMain() {\n\tif (ma.roomID === ma.walkTo[ma.nextRoom]) {\n    \tif (ma.nextRoom < ma.walkTo.length) {\n            send_command(\"PROSPECT\", true);\n            send_command(\"STOP\", true);\n    \t} else if (ma.nextRoom >= ma.walkTo.length) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        \t// Prospect final room and end\n        \tsend_command(\"PROSPECT\", true);\n        \tsetTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        \tma.nextRoom = 0;\n        };\n        \n    } else if (ma.nextRoom >= ma.walkTo.length) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        // Last room, end\n        setTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        ma.nextRoom = 0;\n    };\n};\n\n// Prospect Tundra\nfunction ma_prospectTundra() {\n    if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n        if (ma.nextRoomTundra < ma.walkToTundra.length) {\n            send_command(\"PROSPECT\", true);\n            send_command(\"STOP\", true);\n    \t} else if (ma.nextRoomTundra >= ma.walkToTundra.length) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        \t// Prospect final room and end\n        \tsend_command(\"PROSPECT\", true);\n        \tsetTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        \tma.nextRoomTundra = 0;\n    \t};\n    \n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        // Last room, end\n        setTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        ma.nextRoomTundra = 0;\n    };\n};\n\n// Prospecting main areas\nif (ma.checkArea !== \"the frozen tundra\") {\n\tma_prospectMain();\n    \n// Prospecting in Tundra\n} else if (ma.checkArea === \"the frozen tundra\") {\n    ma_prospectTundra();\n};"}]},{"type":"trigger","name":"TooFarAway","enabled":true,"id":1821,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"I'm sorry, but you are too far away from that location to walk there automatically.","actions":[{"action":"script","script":"'use strict';\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Disable group 'ProspectReflex'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Disable trigger 'ArrivedDestiation'\nreflex_disable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n\ndisplay_notice(\"MINING ASSISTANT: TOO FAR! PLEASE MOVE CLOSER TO YOUR STARTING POINT!\", \"#d0ff14\", \"#8b0000\");"}]},{"type":"trigger","name":"DestinationTrack","enabled":false,"id":1867,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You are (\\d+) rooms distant from your destination\\.(\\s+)\\(STOP to abort walking\\.\\)$","actions":[{"action":"script","script":"'use strict';\n\n// Works in tandem with the trigger 'CloudsMovement'\n\n// Set destination tracking value\nlet ma_destinationTrack = args[1];\n\n// If destination is equal to or greater than x rooms away, go to clouds\nif (ma_destinationTrack >= 20) {\n    send_command(\"CLEARQUEUE ALL\", true);\n    send_command(\"STOP\", true);\n    send_command(\"SAY Duanathar\", true);\n};"}]},{"type":"trigger","name":"CloudsMovement","enabled":false,"id":1868,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You quickly utter \"Duanathar\" and your wings flare with power before swiftly carrying you up to on the clouds.","actions":[{"action":"script","script":"'use strict';\n\n// Works in tandem with the trigger 'DestinationTrack'\n\n// Walk to next destination if Area is Skies\nif (ma.checkArea === \"the Skies\") {\n    if (ma.nextRoom < ma.walkTo.length) {\n        if (ma.roomID !== ma.walkTo[ma.nextRoom]) {\n            ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        };\n    };\n};"}]},{"type":"group","name":"ProspectReflex","enabled":true,"id":1824,"items":[{"type":"trigger","name":"ProspectReflex1","enabled":true,"id":1813,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You are enough of a prospector to realise there is no lode here and no point looking for one\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Movement Main\nfunction ma_movementMain() {\n    ma.nextRoom++;\n    if (ma.nextRoom < ma.walkTo.length) {\n        if (ma.roomID !== ma.walkTo[ma.nextRoom]) {\n        \t// Walk to next room\n    \t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n    \t} else if (ma.roomID === ma.walkTo[ma.nextRoom]) {\n        \tma.nextRoom++;\n        \t// Walk to next room\n    \t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        };\n    } else if (ma.nextRoom >= ma.walkTo.length) {\n        \t// Prospecting completed\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoom = 0;\n        \tma.prospecting = 0;\n    };\n};\n\n// Movement Tundra\nfunction ma_movementTundra() {\n    ma.nextRoomTundra++;\n    if (ma.nextRoomTundra < ma.walkToTundra.length) {\n        if (ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n\t\t\t// Walk to next room\n\t\t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n        \tma.nextRoomTundra++;\n        \t// Walk to next room\n\t\t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        };\n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length) {\n        // Prospecting completed\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\tma.nextRoomTundra = 0;\n        ma.prospecting = 0;\n    };\n};\n\n// Prospecting main areas\nif (ma.checkArea !== \"the frozen tundra\") {\n    ma_movementMain();\n\n// Prospecting Tundra\n} else if (ma.checkArea === \"the frozen tundra\") {\n\tma_movementTundra();\n};"}]},{"type":"trigger","name":"ProspectReflex2","enabled":true,"id":1818,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)\\% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Movement on Main\nfunction ma_movementMain() {\n    ma.nextRoom++;\n    if (ma.nextRoom < ma.walkTo.length) {\n        if (ma.roomID !== ma.walkTo[ma.nextRoom]) {\n        \t// Walk to next room\n    \t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n    \t} else if (ma.roomID === ma.walkTo[ma.nextRoom]) {\n        \tma.nextRoom++;\n        \t// Walk to next room\n    \t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        };\n    } else if (ma.nextRoom >= ma.walkTo.length) {\n        \t// Prospecting completed\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoom = 0;\n        \tma.prospecting = 0;\n    };\n};\n\nfunction ma_movementTundra() {\n    ma.nextRoomTundra++;\n    if (ma.nextRoomTundra < ma.walkToTundra.length) {\n        if (ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n\t\t\t// Walk to next room\n\t\t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n        \tma.nextRoomTundra++;\n        \t// Walk to next room\n\t\t\tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        };\n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length) {\n        // Prospecting completed\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\tma.nextRoomTundra = 0;\n        ma.prospecting = 0;\n    };\n};\n\n// Prospecting main areas\nif (ma.checkArea !== \"the frozen tundra\") {\n    ma_movementMain();\n\n// Prospecting Tundra\n} else if (ma.checkArea === \"the frozen tundra\") {\n\tma_movementTundra();\n};"}]},{"type":"trigger","name":"ProspectReflex3","enabled":true,"id":1819,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#ecc0ff","highlight_bg":"#000000"},{"action":"script","script":"'use strict';\n\n// Set lode size\nlet maLodeSize = args[1];\n// Set lode type\nlet maLodeType = args[2];\n\n//Current size detection\nvar ma_checkSize = ma.stopAtSize;\n\n// Stop on detection\nfunction ma_lodeDetected() {\n    if (ma.roomID === ma.walkTo[ma.nextRoom] && ma.nextRoom < ma.walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoom++;\n        ma.prospecting = 0;\n    } else if (ma.nextRoom >= ma.walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoom = 0;\n        ma.prospecting = 0;\n    } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra] && ma.nextRoomTundra < ma.walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoomTundra++\n        ma.prospecting = 0;\n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoomTundra = 0;\n        ma.prospecting = 0;\n    };\n};\n\n// Walk to next room Main\nfunction ma_movementMain() {\n    if (ma.nextRoom < ma.walkTo.length - 1) {\n        if (ma.roomID !== ma.walkTo[ma.nextRoom]) {\n            ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        } else if (ma.roomID === ma.walkTo[ma.nextRoom]) {\n        \tma.nextRoom++;\n        \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        };\n    } else if (ma.nextRoom >= ma.walkTo.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoom = 0;\n        \tma.prospecting = 0;\n    };\n};\n\n// Walk to next room Tundra\nfunction ma_movementTundra() {\n    if (ma.nextRoomTundra < ma.walkToTundra.length - 1) {\n        if (ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n            ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n            ma.nextRoomTundra++;\n        \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        };\n        \n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoomTundra = 0;\n        \tma.prospecting = 0;\n    };\n};\n\nswitch(ma_checkSize) {\n    // If Lode Size to stop at set to tiny\n    case \"tiny\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"tiny\", \"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    // If Lode Size to stop at set to small\n    case \"small\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to medium\n    case \"medium\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n       \n    // If Lode Size to stop at set to large\n    case \"large\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to huge\n    case \"huge\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;     \n\n    // If Lode Size to stop at set to massive\n    case \"massive\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: SOMETHING WENT WRONG! (ProspectReflex3)`, \"#d0ff14\", \"#8b0000\");\n        return;\n};"}]},{"type":"trigger","name":"ProspectReflex4","enabled":true,"id":1851,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#ecc0ff","highlight_bg":"#000000"},{"action":"script","script":"'use strict';\n\n// Set lode size\nlet maLodeSize = args[1];\n// Set lode type\nlet maLodeType = args[2];\n// Set percent lode mined\nlet maLodePercent = args[3];\n\n//Current size detection\nvar ma_checkSize = ma.stopAtSize;\n\n// Stop on detection\nfunction ma_lodeDetected() {\n    if (ma.roomID === ma.walkTo[ma.nextRoom] && ma.nextRoom < ma.walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoom++;\n        ma.prospecting = 0;\n    } else if (ma.nextRoom >= ma.walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoom = 0;\n        ma.prospecting = 0;\n    } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra] && ma.nextRoomTundra < ma.walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoomTundra++\n        ma.prospecting = 0;\n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma.nextRoomTundra = 0;\n        ma.prospecting = 0;\n    };\n};\n\n// Walk to next room Main\nfunction ma_movementMain() {\n    if (ma.nextRoom < ma.walkTo.length - 1) {\n        if (ma.roomID !== ma.walkTo[ma.nextRoom]) {\n            ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        } else if (ma.roomID === ma.walkTo[ma.nextRoom]) {\n        \tma.nextRoom++;\n        \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        };\n    } else if (ma.nextRoom >= ma.walkTo.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoom = 0;\n        \tma.prospecting = 0;\n    };\n};\n\n// Walk to next room Tundra\nfunction ma_movementTundra() {\n    if (ma.nextRoomTundra < ma.walkToTundra.length - 1) {\n        if (ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n            ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        } else if (ma.roomID === ma.walkToTundra[ma.nextRoomTundra]) {\n            ma.nextRoomTundra++;\n        \tma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        };\n        \n    } else if (ma.nextRoomTundra >= ma.walkToTundra.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma.nextRoomTundra = 0;\n        \tma.prospecting = 0;\n    };\n};\n\nswitch(ma_checkSize) {\n    // If Lode Size to stop at set to tiny\n    case \"tiny\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"tiny\", \"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    // If Lode Size to stop at set to small\n    case \"small\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to medium\n    case \"medium\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n       \n    // If Lode Size to stop at set to large\n    case \"large\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to huge\n    case \"huge\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;     \n\n    // If Lode Size to stop at set to massive\n    case \"massive\":\n        // Set sizes and types of lodes to stop at\n        ma.lodeArray = [\"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma.lodeArray.includes(maLodeSize) || ma.lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma.checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma.checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: SOMETHING WENT WRONG! (ProspectReflex3)`, \"#d0ff14\", \"#8b0000\");\n        return;\n};"}]}],"actions":[]},{"type":"group","name":"Gags","enabled":true,"id":1847,"items":[{"type":"trigger","name":"MARegainBalance","enabled":true,"id":1848,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You must regain balance first.","actions":[{"action":"gag"}]},{"type":"trigger","name":"MAIceWall","enabled":true,"id":1856,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"This large ice wall looks to be made of very solid and dense ice, perhaps formed from elemental water. It towers above you, and seems to suck in heat from around you.","actions":[{"action":"gag"}]},{"type":"trigger","name":"MAStopping","enabled":true,"id":1860,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You stumble slightly as you abruptly decide to stop walking towards your goal.","actions":[{"action":"gag"}]},{"type":"trigger","name":"MAStopped","enabled":true,"id":1861,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"Stop what, adventurer?","actions":[{"action":"gag"}]},{"type":"trigger","name":"MAProspectQueued","enabled":true,"id":1865,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"PROSPECT was added to your balance queue.","actions":[{"action":"gag"}]},{"type":"trigger","name":"MAPathTrack","enabled":true,"id":1866,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^path track (\\d+) was added to your balance queue\\.$","actions":[{"action":"gag"}]}],"actions":[]},{"type":"group","name":"Rewrites","enabled":true,"id":1862,"items":[{"type":"trigger","name":"QueueProspect","enabled":false,"id":1863,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"PROSPECT was added to your balance queue.","actions":[{"action":"rewrite","rewrite":"line","rewrite_backref":"1","rewrite_text_type":"value","rewrite_text":"Prospecting...","rewrite_colors":false,"rewrite_fg":"#ffff00","rewrite_bg":"#000000"}]},{"type":"trigger","name":"QueueMovement","enabled":false,"id":1864,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^path track (\\d+) was added to your balance queue\\.$","actions":[{"action":"rewrite","rewrite":"line","rewrite_backref":"1","rewrite_text_type":"value","rewrite_text":"Walking!","rewrite_colors":false,"rewrite_fg":"#ffff00","rewrite_bg":"#000000"}]}],"actions":[]},{"type":"group","name":"Redundant","enabled":true,"id":1874,"items":[{"type":"trigger","name":"AlreadyMoving","enabled":false,"id":1817,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are already traversing to a location. If you wish to cancel your movement, please CLICK HERE.","actions":[{"action":"wait","seconds":"","milliseconds":"100"},{"action":"script","script":"'use strict';\n\n// USING THIS TRIGGER MAY NOT BE NECESSARY, HERE IN CASE NEEDED\n\nlet ma_checkMovement = ma.roomID;\n\n// Main\nif (ma.checkArea !== \"the frozen tundra\") {\n    // If movement has stopped and not at next room, will continue movement\n    if (ma.roomID === ma_checkMovement && ma.roomID !== ma.walkTo[ma.nextRoom]) {\n        ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]));\n        //setTimeout(function(){ send_command(\"GOTO \" + ma.walkTo[ma.nextRoom]); }, 200);\n    };\n    \n// Tundra  \n} else {\n    // If movement has stopped and not at next room, will continue movement\n    if (ma.roomID === ma_checkMovement && ma.roomID !== ma.walkToTundra[ma.nextRoomTundra]) {\n        ma.balanceCommands.push(send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]));\n        //setTimeout(function(){ send_command(\"GOTO \" + ma.walkToTundra[ma.nextRoomTundra]); }, 200);\n    };\n};"}]}],"actions":[]}],"actions":[]},{"type":"group","name":"Strongholds","enabled":true,"id":1828,"items":[{"type":"alias","name":"MhojaveDesert","enabled":true,"id":1829,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 315","prefix_suffix":true}],"text":"mine1","items":[]},{"type":"alias","name":"DakhotaHills","enabled":true,"id":1830,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1106","prefix_suffix":true}],"text":"mine2","items":[]},{"type":"alias","name":"ShamtotaHills","enabled":true,"id":1831,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1431","prefix_suffix":true}],"text":"mine3","items":[]},{"type":"alias","name":"PashValley","enabled":true,"id":1832,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1721","prefix_suffix":true}],"text":"mine4","items":[]},{"type":"alias","name":"VashnarCentral","enabled":true,"id":1833,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 2014","prefix_suffix":true}],"text":"mine5","items":[]},{"type":"alias","name":"DunValley","enabled":true,"id":1834,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 3796","prefix_suffix":true}],"text":"mine6","items":[]},{"type":"alias","name":"Sirrocian","enabled":true,"id":1835,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 2982","prefix_suffix":true}],"text":"mine7","items":[]},{"type":"alias","name":"GraniteHills1","enabled":true,"id":1836,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 9146","prefix_suffix":true}],"text":"mine8","items":[]},{"type":"alias","name":"GraniteHills2","enabled":true,"id":1837,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 9097","prefix_suffix":true}],"text":"mine9","items":[]},{"type":"alias","name":"VashnarSouth1","enabled":true,"id":1838,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 10409","prefix_suffix":true}],"text":"mine10","items":[]},{"type":"alias","name":"VashnarSouth2","enabled":true,"id":1839,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 10295","prefix_suffix":true}],"text":"mine11","items":[]},{"type":"alias","name":"FrozenTundra","enabled":true,"id":1845,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 11254","prefix_suffix":true}],"text":"mine12"},{"type":"alias","name":"FissureOfEchoes","enabled":true,"id":1846,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 20259","prefix_suffix":true}],"text":"mine13"}],"actions":[]},{"type":"group","name":"Tracking","enabled":true,"id":1870,"items":[{"type":"trigger","name":"MineCollection","enabled":false,"id":1804,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Mine collection table\nma.mineInfo = {\n  commodity: \"\",\n  mineSize: \"\",\n  lodeSize: \"\",\n  miningStatus: 0,\n  owner: \"\",\n  city: \"\",\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\nma.mineInfo.commodity = args[2]\nma.mineInfo.mineSize = args[1];\nma.mineInfo.lodeSize = args[3];\nma.mineInfo.miningStatus = args[4];\nma.mineInfo.area = ma.checkArea;\nma.mineInfo.room = `${ma.roomName} (${ma.roomID})`;\nma.mineInfo.environment = ma.checkEnviro;\n\nif (ma.blizzard === 0) {\n    send_command(\"READ \" + ma.signID, true);\n} else {\n    send_command(\"READ SIGN\", true);\n};"},{"action":"waitfor","text":"^This (\\w+) (.+) mine is owned by (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true,"expire":"10"},{"action":"script","script":"'use strict';\n\nma.mineInfo.owner = args[3];\nma.mineInfo.city = cdb_get_city(args[3]).charAt(0).toUpperCase() + cdb_get_city(args[3]).slice(1);\n\n// Set stored table element values to new string\nlet ma_mineString = `${ma.counterMines}: ${ma.mineInfo.commodity}, ${ma.mineInfo.mineSize} mine, ${ma.mineInfo.lodeSize} lode, ${ma.mineInfo.miningStatus}%, ${ma.mineInfo.owner}, ${ma.mineInfo.city}, ${ma.mineInfo.area}, ${ma.mineInfo.room}, ${ma.mineInfo.environment}.`;\n\n//Push new string to array\nma.finalMines.push(ma_mineString);\nma.counterMines++;\n\n/*\n// Makes entire string Uppercase\n$.each(ma_finalMine, function(index, item) {\n    ma_finalMine[index] = item.toUpperCase();\n});\n*/"}],"items":[]},{"type":"trigger","name":"LodeCollection1","enabled":true,"id":1826,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Lode Table\nma.lodeInfo = {\n  commodity: \"\",\n  lodeSize: \"\",\n  area: \"\",\n  room: \"\",\n};\n\n// Set table values\nma.lodeInfo.lodeSize = args[1];\nma.lodeInfo.commodity = args[2];\nma.lodeInfo.area = ma.checkArea;\nma.lodeInfo.room = `${ma.roomName} (${ma.roomID})`;\n\n// Convert to string\nlet ma_lodeString = `${ma.counterLodes}: ${ma.lodeInfo.commodity}, ${ma.lodeInfo.lodeSize} lode, ${ma.lodeInfo.area}, ${ma.lodeInfo.room}.`;\n\n// Push string\nma.finalLodes.push(ma_lodeString);\nma.counterLodes++;"}]},{"type":"trigger","name":"LodeCollection2","enabled":true,"id":1852,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Lode Table\nma.lodeInfo = {\n  commodity: \"\",\n  lodeSize: \"\",\n  lodePercent: 0,\n  area: \"\",\n  room: \"\",\n};\n\n// Set table values\nma.lodeInfo.lodeSize = args[1];\nma.lodeInfo.commodity = args[2];\nma.lodeInfo.lodePercent = args[3];\nma.lodeInfo.area = ma.checkArea;\nma.lodeInfo.room = `${ma.roomName} (${ma.roomID})`;\n\n// Convert to string\nlet ma_lodeString = `${ma.counterLodes}: ${ma.lodeInfo.commodity}, ${ma.lodeInfo.lodeSize} lode, ${ma.lodeInfo.lodePercent}% mined, ${ma.lodeInfo.area}, ${ma.lodeInfo.room}.`;\n\n// Push string\nma.finalLodes.push(ma_lodeString);\nma.counterLodes++;"}]},{"type":"trigger","name":"LodeTrack1","enabled":true,"id":1841,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\nma.prArea = ma.checkArea.replace(/\\b\\w/g, l => l.toUpperCase());\nma.prLodeSize = args[1].charAt(0).toUpperCase() + args[1].slice(1);\nma.prLodeType = args[2].replace(/\\b\\w/g, l => l.toUpperCase());\nma.prRoomName = ma.roomName;\nma.prRoomID = ma.roomID;"}],"items":[]},{"type":"trigger","name":"LodeTrack2","enabled":true,"id":1858,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"script","script":"'use strict';\n\nma.prArea = ma.checkArea.replace(/\\b\\w/g, l => l.toUpperCase());\nma.prLodeSize = args[1].charAt(0).toUpperCase() + args[1].slice(1);\nma.prLodeType = args[2].replace(/\\b\\w/g, l => l.toUpperCase());\nma.prLodeMined = args[3] + '%';\nma.prRoomName = ma.roomName;\nma.prRoomID = ma.roomID;"}]},{"type":"trigger","name":"Blizzard","enabled":true,"id":1876,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^(A blizzard obscures your vision\\.|Your vision is blocked by the blizzard\\.|The heavy blizzard continues to completely obscure all vision\\.)$","actions":[{"action":"script","script":"ma.blizzard = 1;"}]}],"actions":[]},{"type":"group","name":"RoomCollect","enabled":false,"id":1808,"items":[{"type":"trigger","name":"RoomCollect1","enabled":true,"id":1807,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)\\% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Room Table\nma.roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\n// Set table values\nma.roomInfo.area = ma.checkArea;\nma.roomInfo.room = `${ma.roomName} (${ma.roomID})`;\nma.roomInfo.environment = ma.checkEnviro;\n\n// Convert to string\nlet ma_dataString = `${ma.counterData}: ${ma.roomInfo.area}, ${ma.roomInfo.room}, ${ma.roomInfo.environment} environment.`;\n\n// Push string\nma.finalData.push(ma_dataString);\nma.counterData++;"}]},{"type":"trigger","name":"RoomCollect2","enabled":true,"id":1806,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are enough of a prospector to realise there is no lode here and no point looking for one.","actions":[{"action":"script","script":"'use strict';\n\n// Room Table\nma.roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\n// Set table values\nma.roomInfo.area = ma.checkArea;\nma.roomInfo.room = `${ma.roomName} (${ma.roomID})`;\nma.roomInfo.environment = ma.checkEnviro;\n\n// Convert to string\nlet ma_dataString = `${ma.counterData}: ${ma.roomInfo.area}, ${ma.roomInfo.room}, ${ma.roomInfo.environment} environment.`;\n\n// Push string\nma.finalData.push(ma_dataString);\nma.counterData++;"}]},{"type":"trigger","name":"RoomCollect3","enabled":true,"id":1805,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Room Table\nma.roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\n// Set table values\nma.roomInfo.area = ma.checkArea;\nma.roomInfo.room = `${ma.roomName} (${ma.roomID})`;\nma.roomInfo.environment = ma.checkEnviro;\n\n// Convert to string\nlet ma_dataString = `${ma.counterData}: ${ma.roomInfo.area}, ${ma.roomInfo.room}, ${ma.roomInfo.environment} environment.`;\n\n// Push string\nma.finalData.push(ma_dataString);\nma.counterData++;"}]},{"type":"trigger","name":"RoomCollect4","enabled":true,"id":1869,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Room Table\nma.roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\n// Set table values\nma.roomInfo.area = ma.checkArea;\nma.roomInfo.room = `${ma.roomName} (${ma.roomID})`;\nma.roomInfo.environment = ma.checkEnviro;\n\n// Convert to string\nlet ma_dataString = `${ma.counterData}: ${ma.roomInfo.area}, ${ma.roomInfo.room}, ${ma.roomInfo.environment} environment.`;\n\n// Push string\nma.finalData.push(ma_dataString);\nma.counterData++;"}]}],"actions":[]},{"type":"group","name":"Incomplete","enabled":false,"id":1873,"items":[{"type":"trigger","name":"BlockedByWall","enabled":false,"id":1854,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"A wall bars your path.","actions":[{"action":"script","script":"'use strict';\n\n// Belongs in the group 'ProspectTriggers'\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Disable group 'ProspectReflex'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Disable trigger 'ArrivedDestiation'\nreflex_disable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n\nif (ma.blizzard === 0) {\n\tif (ma.wallID !== undefined) {\n    \tsend_command(\"LOOK \" + ma.wallID, true);\n\t} else {\n\t\tsend_command(\"LOOK \", true);\n    \tsetTimeout(function(){ send_command(\"LOOK \" + ma.wallID, true); }, 1000);\n\t};\n} else {\n    send_command(\"LOOK WALL\", true);\n};"},{"action":"waitfor","text":"^A large wall of (\\w+) is blocking passage to the (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true,"expire":"10"},{"action":"script","script":"'use strict';\n\nma.balanceCommands.push(send_command(\"MJ \" + args[2], true));\ndisplay_notice(\"MINING ASSISTANT: BLOCKADE DETECTED! JUMPING!\", \"#d0ff14\", \"#8b0000\");"},{"action":"waitfor","text":"^You pull back the reins on your mount and jump off to the (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true,"expire":"10"},{"action":"script","script":"'use strict';\n\nsend_command(\"MAPR\");"}]}],"actions":[]},{"type":"alias","name":"FullRoute1 (example alias)","enabled":true,"id":1843,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"// This is the default route set on first load\n\nsend_command(\"maroute gra san vashcen dun vashs mhocen mhosw sir shamte pashe pashw shamtw\");"}],"text":"rt1"},{"type":"alias","name":"FullRoute2 (example alias)","enabled":true,"id":1875,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"send_command(\"maroute sir shamte pashe pashw shamtw vashs dak vashcen dun gra san mhocen mhosw\");"}],"text":"rt2"},{"type":"alias","name":"","enabled":true,"id":1811,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Resets the variables used in Prospecting and Data Collection (In most cases used for testing purposes)\n// Route will be set back to the beginning when used\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\nma.nextRoom = 0;\nma.nextRoomTundra = 0;\nma.counterMines = 1;\nma.counterData = 1;\nma.counterLodes = 1;\nma.prospecting = 0;\n\nma.finalMines.splice(0, ma.finalMines.length);\nma.finalData.splice(0, ma.finalData.length);\nma.finalLodes.splice(0, ma.finalLodes.length);\n\ndisplay_notice(`MINING ASSISTANT: VALUES RESET!`, \"#d0ff14\", \"#8b0000\");"}],"text":"mareset"},{"type":"alias","name":"","enabled":true,"id":1871,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Display some relevant values (In most cases used for testing purposes)\n\ndisplay_notice(\"MINING ASSISTANT:\");\nprint(\"ma.walkTo[ma.nextRoom] \" + ma.walkTo[ma.nextRoom]);\nprint(\"ma.walkTo[ma.nextRoomTundra] \" + ma.walkToTundra[ma.nextRoomTundra]);\n\nprint(\"ma.walkTo Length \" + ma.walkTo.length);\nprint(\"ma.walkToTundra Length \" + ma.walkToTundra.length);\nprint(\"ma.roomID \" + ma.roomID);\nprint(\"ma.checkArea \" + ma.checkArea);\nprint(\"ma.stopAtSize \" + client.get_variable(\"ma.stopAtSize\"));\nprint(\"ma.nextRoom \" + ma.nextRoom);\nprint(\"ma.nextRoomTundra \" + ma.nextRoomTundra);\n\nprint(\"ma.counterMines \" + ma.counterMines);\nprint(\"ma.counterLodes \" + ma.counterLodes);\nprint(\"ma.counterData \" + ma.counterData);\n\nprint(\"ma.prospecting \" + ma.prospecting);\n\ndisplay_notice(`Current route is ${ma.walkToRoute}.`);\n\nprint(\"ma.balanceCommands \" + ma.balanceCommands.length);\nfor (let i = 0; i < ma.balanceCommands.length; i++) {\n    print(ma.balanceCommands[i]);\n};\nprint(\"Balance \" + ma.myBal);"}],"text":"mavals"}],"description":"prospecting, lode reporting, information collection"}