{"type":"group","name":"mining assistant","enabled":true,"id":1,"items":[{"type":"function","name":"- READ ME -","enabled":true,"id":1850,"code":"/*\n\nList of Commands\n----------------\n\nMALEGEND : Displays this list.\n\nMACOLLECT : Turns ON or OFF the Mine and Lode data collection.\n\nMASETTINGS : Displays your current settings.\n\nMAPR : Begins prospecting.\n\nMASTOP : Stops prospecting. Will continue prospecting from the stopping point when re-initialized with MAPR.\n\nMALODESIZE <size> : Sets the size of lode that prospecting will stop at. Tiny, Small, Medium, Large, Huge, or Massive.\n\nMAROUTE <route> : Set the route by area that will be prospected.\nExamples: maroute gra san vashcen dun vashs dak shamtw pashw pashe shamte sir mhocen mhosw OR maroute dak vashs sir gra\n\nArea Keys\ndak = Dakhota Hills\ndun = Dun Valley\ngra = Granite Hills\nmhocen = Mhojave Desert Central\nmhosw = Mhojave Desert Southwest\npashe = Pash Valley East\npashw = Pash Valley West\nsan = Sangre Plains\nshamte = Shamtota Hills East\nshamtw = Shamtota Hills West\nsir = Sirrocian Mountains\nvashcen = Vashnar Mountains Central\nvashs = Vashnar Mountains South\n\n*/"},{"type":"function","name":"onLoad","enabled":true,"id":1809,"code":"'use strict';\n\nma_balanceCommands = [];\n\n// Set Room and Data tracking variables\nma_nextRoom = 0;\nma_nextRoomTundra = 0;\nma_counterMines = 1;\nma_counterLodes = 1;\nma_counterData = 1;\nma_finalData = [];\nma_finalMines = [];\nma_finalLodes = [];\nma_signID = undefined;\n\n// Exits\nma_exitFullname = {\n    u: 'Up',\n    d: 'Down',\n    in: 'In',\n    out: 'Out',\n    n: 'North',\n    ne: 'Northeast',\n    e: 'East',\n    se: 'Southeast',\n    s: 'South',\n    sw: 'Southwest',\n    w: 'West',\n    nw: 'Northwest',\n};\n\nma_exitTrack = [];\nma_wallID = undefined;\n\n// Set Rooms for Tundra\nma_walkToTundra = [10832, 10866, 10833, 10836, 10835, 10906, 10922, 10923, 10924, 11049, 10891, 10892, 10894, 10896, 10893, 10897, 10898, 10901, 10907, 13931, 10909, 10911, 13934, 10912, 14104, 10914, 10915];\n\n// Set default route\nif (!client.get_variable(\"ma_walkToRoute\") || !client.get_variable(\"ma_walkTo\")) {\n    send_command(\"maroute gra san vashcen dun vashs dak shamtw pashw pashe shamte sir mhocen mhosw\");\n    display_notice(`MINING ASSISTANT: Default Route Set!`, \"#d0ff14\", \"#8b0000\");\n} else {\n    ma_walkTo = client.get_variable(\"ma_walkTo\");\n    ma_walkToRoute = client.get_variable(\"ma_walkToRoute\");\n    display_notice(`MINING ASSISTANT: Current route is ${ma_walkToRoute}.`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Set default lode size to stop at\nif (!client.get_variable(\"ma_stopAtSize\")) {\n    send_command(\"malodesize medium\");\n    display_notice(`MINING ASSISTANT: No custom lode size to stop at detected, default set to Medium.`, \"#d0ff14\", \"#8b0000\");\n} else {\n    ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n    display_notice(`MINING ASSISTANT: Will stop prospecting at ${ma_stopAtSize.toUpperCase()} lodes.`, \"#d0ff14\", \"#8b0000\");\n};\n\n// Set mine collection\nif (!client.get_variable(\"ma_mineCollect\")) {\n    ma_mineCollect = false;\n    display_notice(`MINING ASSISTANT: Mine collection set OFF by default!`, \"#d0ff14\", \"#8b0000\");\n} else {\n    ma_mineCollect = client.get_variable(\"ma_mineCollect\");\n    if (ma_mineCollect === true) {\n        display_notice(`MINING ASSISTANT: Mine collection is ON!`, \"#d0ff14\", \"#8b0000\");\n    } else {\n        display_notice(`MINING ASSISTANT: Mine collection is OFF!`, \"#d0ff14\", \"#8b0000\");\n    };\n};\n\ndisplay_notice(`MINING ASSISTANT: To change these settings, please refer to MALEGEND.`, \"#d0ff14\", \"#8b0000\");"},{"type":"function","name":"onGMCP","enabled":true,"id":1820,"code":"'use strict';\n\nif (args.gmcp_method === \"Char.Vitals\") {\n    ma_myBal = args.gmcp_args.bal\n    if (ma_myBal === 0 && ma_myBal !== args.gmcp_args.bal) {\n      if (ma_balanceCommands.length > 0) {\n          ma_balanceCommands.shift();\n      };\n        ma_myBal = args.gmcp_args.bal\n    };\n};\n\nif (args.gmcp_method === \"Room.Info\") {\n\t//Room Set\n\tma_roomName = args.gmcp_args.name;\n    \n    //Room ID Set\n    ma_roomID = args.gmcp_args.num;\n\n\t//Area Set\n\tma_checkArea = args.gmcp_args.area;\n\t\n\t//Environment Set\n\tma_checkEnviro = args.gmcp_args.environment;\n    \n    //Exit Set\n    ma_roomExits = args.gmcp_args.exits;\n    let ma_exitString = \"\"; // exitFullname is defined in the onLoad\n    ma_exitTrack.splice(0, ma_exitTrack.length);\n    for (let exit in ma_roomExits) {\n        ma_exitString += ma_exitFullname[exit] + \" \";\n        ma_exitTrack.push(ma_exitFullname[exit]);\n    };\n};\n\n// Item ID Set\nif (args.gmcp_method === \"Char.Items.List\") {\n    for (let i = 0; i < args.gmcp_args.items.length; i++) {\n        \n        // Set Sign ID\n        if (args.gmcp_args.items[i].name === \"a small wooden sign\") {\n            ma_signID = args.gmcp_args.items[i].id;\n        };\n        \n        // Set Ice Wall ID\n        if (args.gmcp_args.items[i].name === \"a large wall of ice\") {\n            ma_wallID = args.gmcp_args.items[i].id;\n        };\n    };\n};\n\n// Wall added while in room\nif (args.gmcp_method === \"Char.Items.Add\") {\n\n        // Set Ice Wall ID\n        if (args.gmcp_args.item.name === \"a large wall of ice\") {\n            ma_wallID = args.gmcp_args.item.id;\n        };\n};\n\n// Wall removed while in room\nif (args.gmcp_method === \"Char.Items.Remove\") {\n    \n        // Set Ice Wall ID\n        if (args.gmcp_args.item.name === \"a large wall of ice\") {\n            ma_wallID = undefined;\n        };\n};"},{"type":"alias","name":"StartProspecting","enabled":true,"id":1810,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Enable group 'ProspectTriggers'\nreflex_enable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Enable group 'ProspectReflex'\nreflex_enable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Enable trigger 'ArrivedDestiation'\nreflex_enable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n// Enable trigger 'AlreadyMoving (gagged)'\nreflex_enable(reflex_find_by_name(\"trigger\", \"AlreadyMoving (gagged)\", true, false, \"Mining assistant\"));\n\n// Start prospecting main areas\nif (ma_checkArea !== \"the frozen tundra\") {\n    display_notice(`MINING ASSISTANT: PROSPECTING INITIALIZED!`, \"#d0ff14\", \"#8b0000\");\n\n\tif (ma_nextRoom < ma_walkTo.length && ma_roomID !== ma_walkTo[ma_nextRoom]) {\n    \tsend_command(\"GOTO \" + ma_walkTo[ma_nextRoom]);\n\n\t} else if (ma_nextRoom < ma_walkTo.length && ma_roomID === ma_walkTo[ma_nextRoom]) {\n    \t// Prospect current room (will happen if continuing in the same room after stopped)\n    \tsend_command(\"PROSPECT\", true);\n    \n\t} else if (ma_nextRoom >= ma_walkTo.length) {\n\t\t// Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t};\n\n// Start prospecting Tundra\n} else if (ma_checkArea === \"the frozen tundra\") {\n    display_notice(`MINING ASSISTANT: PROSPECTING INITIALIZED!`, \"#d0ff14\", \"#8b0000\");\n    \n\tif (ma_nextRoomTundra < ma_walkTo.length && ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n    \tsend_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]);\n\n\t} else if (ma_nextRoomTundra < ma_walkToTundra.length && ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n    \t// Prospect current room (will happen if continuing in the same room after stopped)\n    \tsend_command(\"PROSPECT\", true);\n    \n\t} else if (ma_nextRoomTundra >= ma_walkToTundra.length) {\n\t\t// Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t};\n    \n};"}],"text":"mapr"},{"type":"alias","name":"StopProspecting","enabled":true,"id":1822,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Disable group 'ProspectReflex'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Disable trigger 'ArrivedDestiation'\nreflex_disable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n// Disable trigger 'AlreadyMoving (gagged)'\nreflex_disable(reflex_find_by_name(\"trigger\", \"AlreadyMoving (gagged)\", true, false, \"Mining assistant\"));\n\nsend_command(\"STOP\", true);\nsend_command(\"CLEARQUEUE ALL\", true);\n\ndisplay_notice(`PROSPECTING CEASED! MAPR TO CONTINUE!`, \"#d0ff14\", \"#8b0000\");"}],"text":"mastop"},{"type":"alias","name":"SetRoute","enabled":true,"id":1827,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nlet ma_walkToAreas = {\n    // Dakhota Hills\n    dak: [1077, 1081, 1080, 1079, 1082, 1099, 1083, 1098, 1097, 1096, 1100, 1101, 1125, 1126, 1127, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1130, 1108, 1129, 1107, 1104, 1105, 1111, 1114, 1113, 1112, 1123, 1121, 1118, 1119, 1115, 1102, 1103, 1095, 1092, 1093, 1094, 1084, 1089, 1090, 1091, 1088],\n    // Dun Valley\n    dun: [5032, 5033, 5034, 5035, 5036, 3795, 3797, 3812, 3798, 3821, 3800, 3804, 3802, 3805, 3801, 3799],\n    // Granite Hills\n    gra: [9086, 9088, 9089, 9090, 9091, 9092, 9093, 9096, 9094, 9095, 9138, 9147, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9131, 9130, 9067, 9068, 9069, 9074, 9073, 9075, 9070, 9071, 9072, 9145, 9144, 9143, 9142, 9141, 9140, 9139, 18634, 19004, 11657, 11693],\n    // Mhojave Desert Central\n    mhocen: [1243, 1244, 1251, 1250, 1245, 1249, 1246, 1247, 1235, 1236, 1237, 356, 357, 358, 316, 318, 312, 311, 317, 310, 314, 346, 350, 354, 353, 352, 6587, 6629, 348, 349, 45863, 345, 344, 308, 307, 303, 306, 305, 304, 14790, 13778, 6164, 300, 301, 302, 309],\n    // Mhojave Desert Southwest\n    mhosw: [330, 355, 351, 347, 343, 333, 334, 335, 331],\n    // Pash Valley East\n    pashe: [1626, 1627, 1628, 1631, 1629, 1630, 1633, 1634, 1635, 1632],\n    // Pash Valley West\n    pashw: [1685, 1683, 1686, 1697, 1706, 1707, 1708, 1709, 1710, 1705, 1711, 1712, 1719, 1718, 1713, 1714, 1715, 5585, 4315, 1716, 1717, 1720, 1722, 1723, 1724, 1725, 1726],\n    // Sangre Plains\n    san: [7626, 7625, 7226, 7156, 7155, 7154, 7153],\n    // Shamtota Hills East\n    shamte: [1429, 1426, 1424, 1425, 1423, 1427, 1428, 1435, 1432, 1430, 1434, 1433],\n    // Shamtota Hills West\n    shamtw: [1619, 1728, 1727, 1729, 1490, 1436],\n    // Sirrocian Mountains\n    sir: [2988, 2987, 2986, 2985, 2984, 2983, 2981, 3420, 3421, 3422, 3423, 3424, 2980, 2979, 2977, 2990, 2991, 2997, 3015, 3016, 28632, 3017, 3019, 3389, 3390, 3020, 3391, 3018],\n    // Vashnar Mountains Central\n    vashcen: [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019],\n    // Vashnar Mountains South\n    vashs: [10222, 10206, 10181, 10189, 10185, 10182, 10186, 10184, 10190, 10192, 10193, 10187, 10240, 10194, 10195, 10196, 10712, 10202, 10203, 10567, 10412, 10429, 10218, 10219, 10448, 10250, 10280, 38162, 35601, 35193, 10241, 10458, 10381, 10502, 10224, 10247, 10226, 10299, 10342, 10235, 13553, 10311],\n};\n\nlet ma_areaOrderString = args[0].toLowerCase().split(' ');\nlet ma_areaOrder = [];\nlet ma_areaNewString = [];\nfor (let i = 1; i < ma_areaOrderString.length; i++) {\n    \n    // Pretty-up the route display and check for input errors\n    switch(ma_areaOrderString[i]) {  \n        case \"sir\":\n            ma_areaNewString.push(\"Sirrocian Mountains\");\n            //print(ma_areaNewString);\n        \tbreak;\n    \n    \tcase \"shamte\":\n            ma_areaNewString.push(\"Shamtota Hills (East)\");\n            //print(ma_areaNewString);\n        \tbreak;\n        \n    \tcase \"shamtw\":\n            ma_areaNewString.push(\"Shamtota Hills (West)\");\n            //print(ma_areaNewString);\n        \tbreak;\n        \n    \tcase \"pashe\":\n            ma_areaNewString.push(\"Pash Valley (East)\");\n            //print(ma_areaNewString);\n        \tbreak;\n        \n    \tcase \"pashw\":\n            ma_areaNewString.push(\"Pash Valley (West)\");\n            //print(ma_areaNewString); \n            break;\n\n    \tcase \"vashs\":\n            ma_areaNewString.push(\"Vashnar Mountains (Southern)\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"vashcen\":\n            ma_areaNewString.push(\"Vashnar Mountains (Central)\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"mhocen\":\n            ma_areaNewString.push(\"Mhojave Desert (Central)\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"mhosw\":\n            ma_areaNewString.push(\"Mhojave Desert (Southwest)\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"dak\":\n            ma_areaNewString.push(\"Dakhota Hills\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"dun\":\n            ma_areaNewString.push(\"Dun Valley\");\n            //print(ma_areaNewString);\n        \tbreak;\n            \n        case \"gra\":\n            ma_areaNewString.push(\"Granite Hills\");\n            //print(areaNewString);\n        \tbreak;\n            \n        case \"san\":\n            ma_areaNewString.push(\"Sangre Plains\");\n            //print(ma_areaNewString);\n        \tbreak;\n        \n    \tdefault:\n        \tdisplay_notice(`MINING ASSISTANT: NOT A CORRECT INPUT!`, \"#d0ff14\", \"#8b0000\");\n            display_notice(`Please use sir, shamte, shamtw, pashe, pashw, vashs, vashcen, dak, mhocen, mhosw, dun, gra, or san.\\nTo see this list in greater detail, use MALEGEND.`, \"#d0ff14\", \"#8b0000\");\n            return;\n    };\n    \n    // Set new route\n    ma_walkToAreas[ma_areaOrderString[i]].forEach(area => ma_areaOrder.push(area));\n};\nclient.set_variable(\"ma_walkTo\", ma_areaOrder);\nma_walkTo = client.get_variable(\"ma_walkTo\");\nclient.set_variable(\"ma_walkToRoute\", ma_areaNewString.toString().replace(/,/g , ', '));\nma_walkToRoute = client.get_variable(\"ma_walkToRoute\");\ndisplay_notice(`MINING ASSISTANT: Route set to ${ma_walkToRoute}.`, \"#d0ff14\", \"#8b0000\");"}],"text":"^maroute (.+)$"},{"type":"alias","name":"SetLodeDetection","enabled":true,"id":1825,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nvar ma_setSize = args[1].toLowerCase();\n\nswitch(ma_setSize) {  \n    case \"tiny\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n    \n    case \"small\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"medium\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"large\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    case \"huge\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} OR LARGER LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;      \n\n    case \"massive\":\n        client.set_variable(\"ma_stopAtSize\", ma_setSize);\n        ma_stopAtSize = client.get_variable(\"ma_stopAtSize\");\n        display_notice(`MINING ASSISTANT: WILL STOP PROSPECTING AT ${ma_setSize.toUpperCase()} LODES!`, \"#d0ff14\", \"#8b0000\");\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: NOT A CORRECT INPUT! PLEASE USE TINY, SMALL, MEDIUM, LARGE, HUGE, OR MASSIVE!`, \"#d0ff14\", \"#8b0000\");\n};"}],"text":"^malodesize (\\w+)$"},{"type":"alias","name":"MineCollection On/Off","enabled":true,"id":1857,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"if (ma_mineCollect === false) {\n    ma_mineCollect = true;\n    client.set_variable(\"ma_mineCollect\", true);\n    // Enable trigger 'MineCollection'\n\treflex_enable(reflex_find_by_name(\"trigger\", \"MineCollection\", true, false, \"Mining assistant\"));\n    \n    display_notice(`MINING ASSISTANT: MINE COLLECTION ON!`, \"#d0ff14\", \"#8b0000\");\n} else if (ma_mineCollect === true) {\n    ma_mineCollect = false\n    client.set_variable(\"ma_mineCollect\", false);\n    // Disable trigger 'MineCollection'\n\treflex_disable(reflex_find_by_name(\"trigger\", \"MineCollection\", true, false, \"Mining assistant\"));\n\tdisplay_notice(`MINING ASSISTANT: MINE COLLECTION OFF!`, \"#d0ff14\", \"#8b0000\");\n};"}],"text":"macollect"},{"type":"alias","name":"LegendDisplay","enabled":true,"id":1849,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"display_notice(`MINING ASSISTANT LEGEND\\n~~~~~~~~~~~~~~~~~~\\n\nMALEGEND : Displays this list.\\n\nMACOLLECT : Turns ON or OFF the Mine data collection.\\n\nMASETTINGS : Displays your current settings.\\n\nMAPR : Begins prospecting.\\n\nMASTOP : Stops prospecting. Will continue prospecting from the stopping point when re-initialized with MAPR.\\n\nMALODESIZE <size> : Sets the size of lode that prospecting will stop at. Tiny, Small, Medium, Large, Huge, or Massive.\\n\nMAROUTE <route> : Set the route by area that will be prospected.\nExamples: maroute gra san vashcen dun vashs dak shamtw pashw pashe shamte sir mhocen mhosw OR maroute dak vashs sir gra\\n\nArea Keys\ndak = Dakhota Hills\ndun = Dun Valley\ngra = Granite Hills\nmhocen = Mhojave Desert Central\nmhosw = Mhojave Desert Southwest\npashe = Pash Valley East\npashw = Pash Valley West\nsan = Sangre Plains\nshamte = Shamtota Hills East\nshamtw = Shamtota Hills West\nsir = Sirrocian Mountains\nvashcen = Vashnar Mountains Central\nvashs = Vashnar Mountains South`, \"#f0fff0\");"}],"text":"malegend"},{"type":"alias","name":"SettingsDisplay","enabled":true,"id":1859,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"display_notice(`Prospecting stops at: ${client.get_variable(\"ma_stopAtSize\").replace(/\\b\\w/g, l => l.toUpperCase())} lodes`);\n\nif (client.get_variable(\"ma_mineCollect\") === true) {\n    display_notice(`Mine Collection: ON`);\n} else if (ma_mineCollect === false) {\n    display_notice(`Mine Collection: OFF`);\n};\n\ndisplay_notice(`Current Route:\\n${client.get_variable(\"ma_walkToRoute\")}`);"}],"text":"masettings"},{"type":"trigger","name":"MineCollection","enabled":true,"id":1804,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Mine collection table\nma_mineInfo = {\n  commodity: \"\",\n  mineSize: \"\",\n  lodeSize: \"\",\n  miningStatus: 0,\n  owner: \"\",\n  city: \"\",\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\nma_mineInfo.commodity = args[2]\nma_mineInfo.mineSize = args[1];\nma_mineInfo.lodeSize = args[3];\nma_mineInfo.miningStatus = args[4];\nma_mineInfo.area = ma_checkArea;\nma_mineInfo.room = `${ma_roomName} (${ma_roomID})`;\nma_mineInfo.environment = ma_checkEnviro;\n\nsend_command(\"READ \" + ma_signID, true);"},{"action":"waitfor","text":"^This (\\w+) (.+) mine is owned by (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true,"expire":"6"},{"action":"script","script":"'use strict';\n\nma_mineInfo.owner = args[3];\nma_mineInfo.city = cdb_get_city(args[3]).charAt(0).toUpperCase() + cdb_get_city(args[3]).slice(1);\n\n// Set stored table element values to new string\nlet ma_mineString = `${ma_counterMines}: ${ma_mineInfo.commodity}, ${ma_mineInfo.mineSize} mine, ${ma_mineInfo.lodeSize} lode, ${ma_mineInfo.miningStatus}%, ${ma_mineInfo.owner}, ${ma_mineInfo.city}, ${ma_mineInfo.area}, ${ma_mineInfo.room}, ${ma_mineInfo.environment} environment.`;\n//print('mineString ' + ma_mineString);\n\n//Push new string to array\nma_finalMines.push(ma_mineString);\nma_counterMines++;\n//print('finalMine ' + ma_finalMines);\n\n/*\n// Makes entire string Uppercase\n$.each(ma_finalMine, function(index, item) {\n    ma_finalMine[index] = item.toUpperCase();\n});\n*/"}],"items":[]},{"type":"trigger","name":"LodeCollection1","enabled":true,"id":1826,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\nma_lodeInfo = {\n  commodity: \"\",\n  lodeSize: \"\",\n  area: \"\",\n  room: \"\",\n};\n\nma_lodeInfo.lodeSize = args[1];\nma_lodeInfo.commodity = args[2];\nma_lodeInfo.area = ma_checkArea;\nma_lodeInfo.room = `${ma_roomName} (${ma_roomID})`;\n\nlet ma_lodeString = `${ma_counterLodes}: ${ma_lodeInfo.commodity}, ${ma_lodeInfo.lodeSize} lode, ${ma_lodeInfo.area}, ${ma_lodeInfo.room}.`;\n\nma_finalLodes.push(ma_lodeString);\nma_counterLodes++;"}]},{"type":"trigger","name":"LodeCollection2","enabled":true,"id":1852,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"script","script":"'use strict';\n\nma_lodeInfo = {\n  commodity: \"\",\n  lodeSize: \"\",\n  lodePercent: 0,\n  area: \"\",\n  room: \"\",\n};\n\nma_lodeInfo.lodeSize = args[1];\nma_lodeInfo.commodity = args[2];\nma_lodeInfo.lodePercent = args[3];\nma_lodeInfo.area = ma_checkArea;\nma_lodeInfo.room = `${ma_roomName} (${ma_roomID})`;\n\nlet ma_lodeString = `${ma_counterLodes}: ${ma_lodeInfo.commodity}, ${ma_lodeInfo.lodeSize} lode, ${ma_lodeInfo.lodePercent}% mined, ${ma_lodeInfo.area}, ${ma_lodeInfo.room}.`;\n\nma_finalLodes.push(ma_lodeString);\nma_counterLodes++;"}]},{"type":"group","name":"ProspectTriggers","enabled":false,"id":1812,"items":[{"type":"group","name":"ProspectReflex","enabled":true,"id":1824,"items":[{"type":"trigger","name":"ProspectReflex1","enabled":true,"id":1813,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You are enough of a prospector to realise there is no lode here and no point looking for one\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Prospecting main areas\nif (ma_checkArea !== \"the frozen tundra\") {\n    ma_nextRoom++;\n    if (ma_nextRoom < ma_walkTo.length) {\n        if (ma_roomID !== ma_walkTo[ma_nextRoom]) {\n        \t// Walk to next room\n    \t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n    \t} else if (ma_roomID === ma_walkTo[ma_nextRoom]) {\n        \tma_nextRoom++;\n        \t// Walk to next room\n    \t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        };\n    \n    } else if (ma_nextRoom >= ma_walkTo.length) {\n        \t// Prospecting completed\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoom = 0;\n    };\n\n// Prospecting Tundra\n} else if (ma_checkArea === \"the frozen tundra\") {\n    ma_nextRoomTundra++;\n    if (ma_nextRoomTundra < ma_walkToTundra.length) {\n        if (ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n\t\t\t// Walk to next room\n\t\t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n        \tma_nextRoomTundra++;\n        \t// Walk to next room\n\t\t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        };\n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length) {\n        // Prospecting completed\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\tma_nextRoomTundra = 0;\n    };\n};"}]},{"type":"trigger","name":"ProspectReflex2","enabled":true,"id":1818,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)\\% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\n// Prospecting main areas\nif (ma_checkArea !== \"the frozen tundra\") {\n    ma_nextRoom++;\n    if (ma_nextRoom < ma_walkTo.length) {\n        if (ma_roomID !== ma_walkTo[ma_nextRoom]) {\n        \t// Walk to next room\n    \t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n    \t} else if (ma_roomID === ma_walkTo[ma_nextRoom]) {\n        \tma_nextRoom++;\n        \t// Walk to next room\n    \t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        };\n    \n    } else if (ma_nextRoom >= ma_walkTo.length) {\n        \t// Prospecting completed\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoom = 0;\n    };\n\n// Prospecting Tundra\n} else if (ma_checkArea === \"the frozen tundra\") {\n    ma_nextRoomTundra++;\n    if (ma_nextRoomTundra < ma_walkToTundra.length) {\n        if (ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n\t\t\t// Walk to next room\n\t\t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n        \tma_nextRoomTundra++;\n        \t// Walk to next room\n\t\t\tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        };\n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length) {\n        // Prospecting completed\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\tma_nextRoomTundra = 0;\n    };\n};"}]},{"type":"trigger","name":"ProspectReflex3","enabled":true,"id":1819,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#ecc0ff","highlight_bg":"#000000"},{"action":"script","script":"'use strict';\n\n// Set lode size\nmaLodeSize = args[1];\n// Set lode type\nmaLodeType = args[2];\n\n//Current size detection\nvar ma_checkSize = ma_stopAtSize;\n\n// Stop on detection\nfunction ma_lodeDetected() {\n    if (ma_roomID === ma_walkTo[ma_nextRoom] && ma_nextRoom < ma_walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoom++;\n    } else if (ma_nextRoom >= ma_walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoom = 0;\n    } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra] && ma_nextRoomTundra < ma_walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoomTundra++\n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoomTundra = 0;\n    };\n};\n\n// Walk to next room Main\nfunction ma_movementMain() {\n    if (ma_nextRoom < ma_walkTo.length - 1) {\n        if (ma_roomID !== ma_walkTo[ma_nextRoom]) {\n            ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        } else if (ma_roomID === ma_walkTo[ma_nextRoom]) {\n        \tma_nextRoom++;\n        \tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        };\n    } else if (ma_nextRoom >= ma_walkTo.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoom = 0;\n    };\n};\n\n// Walk to next room Tundra\nfunction ma_movementTundra() {\n    if (ma_nextRoomTundra < ma_walkToTundra.length - 1) {\n        if (ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n            ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n            ma_nextRoomTundra++;\n        \tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        };\n        \n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoomTundra = 0;\n    };\n};\n\nswitch(ma_checkSize) {\n    // If Lode Size to stop at set to tiny\n    case \"tiny\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"tiny\", \"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    // If Lode Size to stop at set to small\n    case \"small\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to medium\n    case \"medium\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n       \n    // If Lode Size to stop at set to large\n    case \"large\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to huge\n    case \"huge\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;     \n\n    // If Lode Size to stop at set to massive\n    case \"massive\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: SOMETHING WENT WRONG! (ProspectReflex3)`, \"#d0ff14\", \"#8b0000\");\n        return;\n};"}]},{"type":"trigger","name":"ProspectReflex4","enabled":true,"id":1851,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"highlight","highlight":"line","highlight_backref":"1","highlight_fg":"#ecc0ff","highlight_bg":"#000000"},{"action":"script","script":"'use strict';\n\n// Set lode size\nmaLodeSize = args[1];\n// Set lode type\nmaLodeType = args[2];\n// Set percent lode mined\nmaLodePercent = args[3];\n\n//Current size detection\nvar ma_checkSize = ma_stopAtSize;\n\n// Stop on detection\nfunction ma_lodeDetected() {\n    if (ma_roomID === ma_walkTo[ma_nextRoom] && ma_nextRoom < ma_walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoom++;\n    } else if (ma_nextRoom >= ma_walkTo.length - 1) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoom = 0;\n    } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra] && ma_nextRoomTundra < ma_walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED, STOPPING AT THIS LOCATION!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoomTundra++\n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length - 1) {\n        // Disable group 'ProspectTriggers'\n    \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n    \tdisplay_notice(`MINING ASSISTANT: A ${maLodeSize.toUpperCase()} LODE OF ${maLodeType.toUpperCase()} HAS BEEN DETECTED!`, \"#d0ff14\", \"#8b0000\");\n        display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n        ma_nextRoomTundra = 0;\n    };\n};\n\n// Walk to next room Main\nfunction ma_movementMain() {\n    if (ma_nextRoom < ma_walkTo.length - 1) {\n        if (ma_roomID !== ma_walkTo[ma_nextRoom]) {\n            ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        } else if (ma_roomID === ma_walkTo[ma_nextRoom]) {\n        \tma_nextRoom++;\n        \tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        };\n    } else if (ma_nextRoom >= ma_walkTo.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoom = 0;\n    };\n};\n\n// Walk to next room Tundra\nfunction ma_movementTundra() {\n    if (ma_nextRoomTundra < ma_walkToTundra.length - 1) {\n        if (ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n            ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        } else if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n            ma_nextRoomTundra++;\n        \tma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        };\n        \n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length - 1) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n    \t\tdisplay_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\");\n\t\t\tma_nextRoomTundra = 0;\n    };\n};\n\nswitch(ma_checkSize) {\n    // If Lode Size to stop at set to tiny\n    case \"tiny\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"tiny\", \"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    // If Lode Size to stop at set to small\n    case \"small\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"small\", \"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to medium\n    case \"medium\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"medium\", \"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n       \n    // If Lode Size to stop at set to large\n    case \"large\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"large\", \"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n    \n    // If Lode Size to stop at set to huge\n    case \"huge\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"huge\", \"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;     \n\n    // If Lode Size to stop at set to massive\n    case \"massive\":\n        // Set sizes and types of lodes to stop at\n        ma_lodeArray = [\"massive\", \"carbon\", \"gold ore\", \"silver ore\", \"raw gems\", \"impure ice\", \"raw obsidian\", \"raw stone\", \"raw bone\"];\n            if (ma_lodeArray.includes(maLodeSize) || ma_lodeArray.includes(maLodeType)) {\n                ma_lodeDetected();\n            } else if (ma_checkArea !== \"the frozen tundra\") {\n                ma_movementMain();\n            } else if (ma_checkArea === \"the frozen tundra\") {\n                ma_movementTundra();\n            };\n        break;\n        \n    default:\n        display_notice(`MINING ASSISTANT: SOMETHING WENT WRONG! (ProspectReflex3)`, \"#d0ff14\", \"#8b0000\");\n        return;\n};"}]}],"actions":[]},{"type":"trigger","name":"ArrivedDestination","enabled":true,"id":1814,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You have arrived at your destination!","actions":[{"action":"script","script":"'use strict';\n\n// Prospecting main areas\nif (ma_checkArea !== \"the frozen tundra\") {\n\tif (ma_roomID === ma_walkTo[ma_nextRoom]) {\n    \tif (ma_nextRoom < ma_walkTo.length) {\n        \tsend_command(\"PROSPECT\", true);\n    \t} else if (ma_nextRoom >= ma_walkTo.length) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        \t// Prospect final room and end\n        \tsend_command(\"PROSPECT\", true);\n        \tsetTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        \tma_nextRoom = 0;\n        };\n        \n    } else if (ma_nextRoom >= ma_walkTo.length) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        // Last room, end\n        setTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        ma_nextRoom = 0;\n    };\n    \n// Prospecting in Tundra\n} else if (ma_checkArea === \"the frozen tundra\") {\n    if (ma_roomID === ma_walkToTundra[ma_nextRoomTundra]) {\n        if (ma_nextRoomTundra < ma_walkToTundra.length) {\n        \tsend_command(\"PROSPECT\", true);\n    \t} else if (ma_nextRoomTundra >= ma_walkToTundra.length) {\n        \t// Disable group 'ProspectTriggers'\n        \treflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        \t// Prospect final room and end\n        \tsend_command(\"PROSPECT\", true);\n        \tsetTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        \tma_nextRoomTundra = 0;\n    \t};\n    \n    } else if (ma_nextRoomTundra >= ma_walkToTundra.length) {\n        // Disable group 'ProspectTriggers'\n        reflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n        \n        // Last room, end\n        setTimeout(function(){ display_notice(`MINING ASSISTANT: PROSPECTING COMPLETED!`, \"#d0ff14\", \"#8b0000\"); }, 1000);\n        ma_nextRoomTundra = 0;\n    };\n};"}]},{"type":"trigger","name":"AlreadyMoving (gagged)","enabled":true,"id":1817,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are already traversing to a location. If you wish to cancel your movement, please CLICK HERE.","actions":[{"action":"gag"},{"action":"wait","seconds":"0","milliseconds":"25"},{"action":"script","script":"'use strict';\n\nlet ma_checkMovement = ma_roomID;\n\n// Main\nif (ma_checkArea !== \"the frozen tundra\") {\n    // If movement has stopped and not at next room, will continue movement\n    if (ma_roomID === ma_checkMovement && ma_roomID !== ma_walkTo[ma_nextRoom]) {\n        ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]));\n        //setTimeout(function(){ send_command(\"GOTO \" + ma_walkTo[ma_nextRoom]); }, 200);\n    };\n    \n// Tundra  \n} else {\n    // If movement has stopped and not at next room, will continue movement\n    if (ma_roomID === ma_checkMovement && ma_roomID !== ma_walkToTundra[ma_nextRoomTundra]) {\n        ma_balanceCommands.push(send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]));\n        //setTimeout(function(){ send_command(\"GOTO \" + ma_walkToTundra[ma_nextRoomTundra]); }, 200);\n    };\n};"}]},{"type":"trigger","name":"TooFarAway","enabled":true,"id":1821,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"I'm sorry, but you are too far away from that location to walk there automatically.","actions":[{"action":"script","script":"'use strict';\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n\ndisplay_notice(\"MINING ASSISTANT: TOO FAR! PLEASE MOVE CLOSER TO YOUR STARTING POINT!\", \"#d0ff14\", \"#8b0000\");"}]},{"type":"trigger","name":"BlockedByWall","enabled":false,"id":1854,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"A wall bars your path.","actions":[{"action":"script","script":"'use strict';\n\nif (ma_wallID !== undefined) {\n    send_command(\"LOOK \" + ma_wallID, true);\n} else {\n\tsend_command(\"LOOK \", true);\n    setTimeout(function(){ send_command(\"LOOK \" + ma_wallID, true); }, 1000);\n};"},{"action":"waitfor","text":"^A large wall of (\\w+) is blocking passage to the (\\w+)\\.$","matching":"regexp","whole_words":true,"case_sensitive":true,"expire":"10"},{"action":"script","script":"'use strict';\n\nsend_command(\"MJ \" + args[2], true);\ndisplay_notice(\"MINING ASSISTANT: BLOCKADE DETECTED! JUMPING!\", \"#d0ff14\", \"#8b0000\");"},{"action":"waitfor","text":"You have recovered balance on all limbs.","matching":"exact","whole_words":true,"case_sensitive":true,"expire":"10"},{"action":"script","script":"'use strict';\n\nsend_command(\"MAPR\");"}]},{"type":"group","name":"Gags","enabled":true,"id":1847,"items":[{"type":"trigger","name":"","enabled":true,"id":1848,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You must regain balance first.","actions":[{"action":"gag"}]},{"type":"trigger","name":"","enabled":true,"id":1856,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"This large ice wall looks to be made of very solid and dense ice, perhaps formed from elemental water. It towers above you, and seems to suck in heat from around you.","actions":[{"action":"gag"}]}],"actions":[]}],"actions":[]},{"type":"group","name":"RoomID Collection","enabled":false,"id":1808,"items":[{"type":"trigger","name":"RoomCollect1","enabled":true,"id":1807,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^There is a (\\w+) (.+) mine here on a (\\w+) lode that you\\'d guess is approximately (\\d+)\\% mined out\\.$","actions":[{"action":"script","script":"'use strict';\n\nma_roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\nma_roomInfo.area = ma_checkArea;\nma_roomInfo.room = `${ma_roomName} (${ma_roomID})`;\nma_roomInfo.environment = ma_checkEnviro;\n\nlet ma_dataString = `${ma_counterData}: ${ma_roomInfo.area}, ${ma_roomInfo.room}, ${ma_roomInfo.environment} environment.`;\n\nma_finalData.push(ma_dataString);\nma_counterData++;"}]},{"type":"trigger","name":"RoomCollect2","enabled":true,"id":1806,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You are enough of a prospector to realise there is no lode here and no point looking for one.","actions":[{"action":"script","script":"'use strict';\n\nma_roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\nma_roomInfo.area = ma_checkArea;\nma_roomInfo.room = `${ma_roomName} (${ma_roomID})`;\nma_roomInfo.environment = ma_checkEnviro;\n\nlet ma_dataString = `${ma_counterData}: ${ma_roomInfo.area}, ${ma_roomInfo.room}, ${ma_roomInfo.environment} environment.`;\n\nma_finalData.push(ma_dataString);\nma_counterData++;"}]},{"type":"trigger","name":"RoomCollect3","enabled":true,"id":1805,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\nma_roomInfo = {\n  area: \"\",\n  room: \"\",\n  environment: \"\",\n};\n\nma_roomInfo.area = ma_checkArea;\nma_roomInfo.room = `${ma_roomName} (${ma_roomID})`;\nma_roomInfo.environment = ma_checkEnviro;\n\nlet ma_dataString = `${ma_counterData}: ${ma_roomInfo.area}, ${ma_roomInfo.room}, ${ma_roomInfo.environment} environment.`;\n\nma_finalData.push(ma_dataString);\nma_counterData++;"}]}],"actions":[]},{"type":"group","name":"Strongholds","enabled":true,"id":1828,"items":[{"type":"alias","name":"DakhotaHills","enabled":true,"id":1830,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1106","prefix_suffix":true}],"text":"mine2","items":[]},{"type":"alias","name":"DunValley","enabled":true,"id":1834,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 3796","prefix_suffix":true}],"text":"mine6","items":[]},{"type":"alias","name":"GraniteHills1","enabled":true,"id":1836,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 9146","prefix_suffix":true}],"text":"mine8","items":[]},{"type":"alias","name":"GraniteHills2","enabled":true,"id":1837,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 9097","prefix_suffix":true}],"text":"mine9","items":[]},{"type":"alias","name":"MhojaveDesert","enabled":true,"id":1829,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 315","prefix_suffix":true}],"text":"mine1","items":[]},{"type":"alias","name":"PashValley","enabled":true,"id":1832,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1721","prefix_suffix":true}],"text":"mine4","items":[]},{"type":"alias","name":"ShamtotaHills","enabled":true,"id":1831,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 1431","prefix_suffix":true}],"text":"mine3","items":[]},{"type":"alias","name":"Sirrocian","enabled":true,"id":1835,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 2982","prefix_suffix":true}],"text":"mine7","items":[]},{"type":"alias","name":"VashnarSouth1","enabled":true,"id":1838,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 10409","prefix_suffix":true}],"text":"mine10","items":[]},{"type":"alias","name":"VashnarSouth2","enabled":true,"id":1839,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 10295","prefix_suffix":true}],"text":"mine11","items":[]},{"type":"alias","name":"VashnarCentral","enabled":true,"id":1833,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 2014","prefix_suffix":true}],"text":"mine5","items":[]},{"type":"alias","name":"FrozenTundra","enabled":true,"id":1845,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 11254","prefix_suffix":true}],"text":"mine12"},{"type":"alias","name":"FissureOfEchoes","enabled":true,"id":1846,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"command","command":"GOTO 20259","prefix_suffix":true}],"text":"mine13"}],"actions":[]},{"type":"alias","name":"","enabled":true,"id":1811,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nprint(\"VALUES RESET!\");\n\nma_nextRoom = 0;\nma_nextRoomTundra = 0;\nma_counterMines = 1;\nma_counterData = 1;\nma_counterLodes = 1;\n\n// Disable group 'ProspectTriggers'\nreflex_disable(reflex_find_by_name(\"group\", \"ProspectTriggers\", true, false, \"Mining assistant\"));\n// Disable group 'ProspectReflex'\n//reflex_disable(reflex_find_by_name(\"group\", \"ProspectReflex\", true, false, \"Mining assistant\"));\n// Disable trigger 'ArrivedDestination'\n//reflex_disable(reflex_find_by_name(\"trigger\", \"ArrivedDestination\", true, false, \"Mining assistant\"));\n// Disable trigger 'AlreadyMoving'\n//reflex_disable(reflex_find_by_name(\"trigger\", \"AlreadyMoving\", true, false, \"Mining assistant\"));\n\nma_finalMines.splice(0, ma_finalMines.length);\nma_finalData.splice(0, ma_finalData.length);\nma_finalLodes.splice(0, ma_finalLodes.length);"}],"text":"mareset"},{"type":"alias","name":"","enabled":true,"id":1816,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nprint(\"ma_nextRoom \" + ma_nextRoom);\nprint(\"ma_nextRoomTundra \" + ma_nextRoomTundra);\nprint(\"ma_walkTo Length \" + ma_walkTo.length);\nprint(\"ma_walkToTundra Length \" + ma_walkToTundra.length);\nprint(\"ma_roomID \" + ma_roomID);\nprint(\"ma_walkTo[ma_nextRoom] \" + ma_walkTo[ma_nextRoom]);\nprint(\"ma_walkTo[ma_nextRoomTundra] \" + ma_walkToTundra[ma_nextRoomTundra]);\nprint(\"ma_checkArea \" + ma_checkArea);\nprint(\"ma_stopAtSize \" + client.get_variable(\"ma_stopAtSize\"));\n\nprint(\"ma_counterMines \" + ma_counterMines);\nfor (let i = 0; i < ma_finalMines.length; i++) {\nprint(ma_finalMines[i]);\n};\n\nprint(\"ma_counterData \" + ma_counterData);\nfor (let i = 0; i < ma_finalData.length; i++) {\nprint(ma_finalData[i]);\n};\n\nprint(\"ma_counterLodes \" + ma_counterLodes);\nfor (let i = 0; i < ma_finalLodes.length; i++) {\nprint(ma_finalLodes[i]);\n};\n\ndisplay_notice(`MINING ASSISTANT: Current route is ${ma_walkToRoute}.`);"}],"text":"mavals"},{"type":"alias","name":"FullRoute1 (example alias)","enabled":true,"id":1843,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"send_command(\"maroute gra san vashcen dun vashs dak shamtw pashw pashe shamte sir mhocen mhosw\");"}],"text":"rt1"},{"type":"trigger","name":"LodeTrack1","enabled":true,"id":1841,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\.$","actions":[{"action":"script","script":"'use strict';\n\nmapr_area = ma_checkArea.replace(/\\b\\w/g, l => l.toUpperCase());\nmapr_lode_size = args[1].charAt(0).toUpperCase() + args[1].slice(1);\nmapr_lode_type = args[2].replace(/\\b\\w/g, l => l.toUpperCase());\nmapr_roomName = ma_roomName;\nmapr_roomID = ma_roomID;"}],"items":[]},{"type":"trigger","name":"LodeTrack2","enabled":true,"id":1858,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You determine that there is a (\\w+) lode of (.+) here\\. Approximately (\\d+)\\% has been mined\\.$","actions":[{"action":"script","script":"'use strict';\n\nmapr_area = ma_checkArea.replace(/\\b\\w/g, l => l.toUpperCase());\nmapr_lode_size = args[1].charAt(0).toUpperCase() + args[1].slice(1);\nmapr_lode_type = args[2].replace(/\\b\\w/g, l => l.toUpperCase());\nmapr_lode_mined = args[3] + '%';\nmapr_roomName = ma_roomName;\nmapr_roomID = ma_roomID;"}]},{"type":"alias","name":"LodeReporting","enabled":false,"id":1853,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"'use strict';\n\nsend_command(\"//Add clan tell here \" + mapr_lode_size + \" \" + mapr_lode_type + \" in \" + mapr_area + \" at \" + mapr_roomName + \" (\" + mapr_roomID + \")\");"}],"text":"loderep","items":[]}],"description":"prospecting, lode reporting, information collection"}